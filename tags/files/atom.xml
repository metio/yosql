<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://gohugo.io/" version="0.121.2">Hugo</generator><title type="html">files on YoSQL</title><link href="https://yosql.projects.metio.wtf/tags/files/" rel="alternate" type="text/html" title="html"/><link href="https://yosql.projects.metio.wtf/tags/files/index.xml" rel="alternate" type="application/rss+xml" title="rss"/><link href="https://yosql.projects.metio.wtf/tags/files/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2024-01-14T07:19:38+00:00</updated><id>https://yosql.projects.metio.wtf/tags/files/</id><entry><title type="html">inputBaseDirectory</title><link href="https://yosql.projects.metio.wtf/configuration/files/inputbasedirectory/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/configuration/files/outputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="outputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/skiplines/?utm_source=atom_feed" rel="related" type="text/html" title="skipLines"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilescharset/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesCharset"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilessuffix/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesSuffix"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlstatementseparator/?utm_source=atom_feed" rel="related" type="text/html" title="sqlStatementSeparator"/><id>https://yosql.projects.metio.wtf/configuration/files/inputbasedirectory/</id><published>2024-01-14T00:00:00+00:00</published><updated>2024-01-14T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The input directory for the user written SQL files.</p>
<h2 id="configuration-options">Configuration Options</h2>
<h3 id="option-">Option: &lsquo;.&rsquo;</h3>
<p>The default value of the <code>inputBaseDirectory</code> configuration option used by the Ant- and CLI-tooling is <code>.</code> - the current directory.</p>
<h3 id="option-srcmainyosql">Option: &lsquo;src/main/yosql&rsquo;</h3>
<p>The default value of the <code>inputBaseDirectory</code> configuration option used by the Gradle- and Maven-tooling is <code>src/main/yosql</code> to better reflect the commonly used project structure expected by those tools.</p>
<h3 id="option-someotherdirectory">Option: &lsquo;some/other/directory&rsquo;</h3>
<p>Changing the <code>inputBaseDirectory</code> configuration option to <code>some/other/directory!</code> configures <code>YoSQL</code> to look into the path relative directory <code>some/other/directory</code>.</p>
<h3 id="option-anabsolutepath">Option: &lsquo;/an/absolute/path&rsquo;</h3>
<p>Changing the <code>inputBaseDirectory</code> configuration option to <code>/an/absolute/path!</code> configures <code>YoSQL</code> to look into the absolute directory path <code>/an/absolute/path</code>.</p>
<h2 id="related-options">Related Options</h2>
<ul>
<li><a href="../outputbasedirectory/">outputBaseDirectory</a>: The output directory for the generated classes.</li>
<li><a href="../skiplines/">skipLines</a>: The number of lines to skip in each file (e.g. a copyright header).</li>
<li><a href="../sqlfilescharset/">sqlFilesCharset</a>: The charset to use while reading .sql files.</li>
<li><a href="../sqlfilessuffix/">sqlFilesSuffix</a>: The file ending to use while searching for SQL files.</li>
<li><a href="../sqlstatementseparator/">sqlStatementSeparator</a>: The separator to split SQL statements inside a single .sql file.</li>
</ul>
<h2 id="tooling">Tooling</h2>
<h3 id="ant">Ant</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://ant.apache.org/">Ant</a>, take a look at the tooling <a href="/tooling/ant/">documentation for Ant</a>.</p>
<h3 id="bazel">Bazel</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://bazel.build/">Bazel</a>, take a look at the tooling <a href="/tooling/bazel/">documentation for Bazel</a>.</p>
<h3 id="cli">CLI</h3>
<p>In order to use <code>YoSQL</code> on the command line, take a look at the tooling <a href="/tooling/cli/">documentation for CLI</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --files-input-base-directory<span class="o">=</span>configValue
</span></span></code></pre></div><p>As long as the name of the config option is unique across all configuration groups, you can use the shorter form:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --input-base-directory<span class="o">=</span>configValue
</span></span></code></pre></div><h3 id="gradle">Gradle</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://gradle.org/">Gradle</a>, take a look at the tooling <a href="/tooling/gradle/">documentation for Gradle</a>. The <code>inputBaseDirectory</code> setting can be configured using Gradle in Kotlin syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">java</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span><span class="p">(</span><span class="s2">&#34;wtf.metio.yosql&#34;</span><span class="p">)</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">inputBaseDirectory</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="n">configValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>or in Groovy syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;java&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;wtf.metio.yosql&#34;</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">inputBaseDirectory</span> <span class="o">=</span> <span class="n">configValue</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="maven">Maven</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://maven.apache.org/">Maven</a>, take a look at the tooling <a href="/tooling/maven/">documentation for Maven</a>. The <code>inputBaseDirectory</code> setting can be configured using Maven like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>yosql-tooling-maven<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2023.2.22<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;files&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;inputBaseDirectory&gt;</span>configValue<span class="nt">&lt;/inputBaseDirectory&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/files&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/configuration" term="configuration" label="Configuration"/><category scheme="https://yosql.projects.metio.wtf/tags/files" term="files" label="files"/></entry><entry><title type="html">outputBaseDirectory</title><link href="https://yosql.projects.metio.wtf/configuration/files/outputbasedirectory/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/configuration/files/inputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="inputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/skiplines/?utm_source=atom_feed" rel="related" type="text/html" title="skipLines"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilescharset/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesCharset"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilessuffix/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesSuffix"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlstatementseparator/?utm_source=atom_feed" rel="related" type="text/html" title="sqlStatementSeparator"/><id>https://yosql.projects.metio.wtf/configuration/files/outputbasedirectory/</id><published>2024-01-14T00:00:00+00:00</published><updated>2024-01-14T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The output directory for the generated classes.</p>
<h2 id="configuration-options">Configuration Options</h2>
<h3 id="option-">Option: &lsquo;.&rsquo;</h3>
<p>The default value of the <code>outputBaseDirectory</code> configuration option is <code>.</code> - the current directory. Note that tooling may change the default output base directory to better reflect a typical project structure used with such a tool.</p>
<h3 id="option-someotherdirectory">Option: &lsquo;some/other/directory&rsquo;</h3>
<p>Changing the <code>outputBaseDirectory</code> configuration option to <code>some/other/directory!</code> configures <code>YoSQL</code> to write into the relative directory<code>some/other/directory</code>.</p>
<h3 id="option-anabsolutepath">Option: &lsquo;/an/absolute/path&rsquo;</h3>
<p>Changing the <code>outputBaseDirectory</code> configuration option to <code>/an/absolute/path!</code> configures <code>YoSQL</code> to write into the absolute directory path <code>/an/absolute/path</code>.</p>
<h2 id="related-options">Related Options</h2>
<ul>
<li><a href="../inputbasedirectory/">inputBaseDirectory</a>: The input directory for the user written SQL files.</li>
<li><a href="../skiplines/">skipLines</a>: The number of lines to skip in each file (e.g. a copyright header).</li>
<li><a href="../sqlfilescharset/">sqlFilesCharset</a>: The charset to use while reading .sql files.</li>
<li><a href="../sqlfilessuffix/">sqlFilesSuffix</a>: The file ending to use while searching for SQL files.</li>
<li><a href="../sqlstatementseparator/">sqlStatementSeparator</a>: The separator to split SQL statements inside a single .sql file.</li>
</ul>
<h2 id="tooling">Tooling</h2>
<h3 id="ant">Ant</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://ant.apache.org/">Ant</a>, take a look at the tooling <a href="/tooling/ant/">documentation for Ant</a>.</p>
<h3 id="bazel">Bazel</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://bazel.build/">Bazel</a>, take a look at the tooling <a href="/tooling/bazel/">documentation for Bazel</a>.</p>
<h3 id="cli">CLI</h3>
<p>In order to use <code>YoSQL</code> on the command line, take a look at the tooling <a href="/tooling/cli/">documentation for CLI</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --files-output-base-directory<span class="o">=</span>configValue
</span></span></code></pre></div><p>As long as the name of the config option is unique across all configuration groups, you can use the shorter form:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --output-base-directory<span class="o">=</span>configValue
</span></span></code></pre></div><h3 id="gradle">Gradle</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://gradle.org/">Gradle</a>, take a look at the tooling <a href="/tooling/gradle/">documentation for Gradle</a>. The <code>outputBaseDirectory</code> setting can be configured using Gradle in Kotlin syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">java</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span><span class="p">(</span><span class="s2">&#34;wtf.metio.yosql&#34;</span><span class="p">)</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">outputBaseDirectory</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="n">configValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>or in Groovy syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;java&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;wtf.metio.yosql&#34;</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">outputBaseDirectory</span> <span class="o">=</span> <span class="n">configValue</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="maven">Maven</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://maven.apache.org/">Maven</a>, take a look at the tooling <a href="/tooling/maven/">documentation for Maven</a>. The <code>outputBaseDirectory</code> setting can be configured using Maven like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>yosql-tooling-maven<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2023.2.22<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;files&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;outputBaseDirectory&gt;</span>configValue<span class="nt">&lt;/outputBaseDirectory&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/files&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/configuration" term="configuration" label="Configuration"/><category scheme="https://yosql.projects.metio.wtf/tags/files" term="files" label="files"/></entry><entry><title type="html">skipLines</title><link href="https://yosql.projects.metio.wtf/configuration/files/skiplines/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/configuration/files/inputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="inputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/outputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="outputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilescharset/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesCharset"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilessuffix/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesSuffix"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlstatementseparator/?utm_source=atom_feed" rel="related" type="text/html" title="sqlStatementSeparator"/><id>https://yosql.projects.metio.wtf/configuration/files/skiplines/</id><published>2024-01-14T00:00:00+00:00</published><updated>2024-01-14T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The number of lines to skip in each file (e.g. a copyright header).</p>
<h2 id="configuration-options">Configuration Options</h2>
<h3 id="option-0">Option: &lsquo;0&rsquo;</h3>
<p>The default value of the <code>skipLines</code> configuration option is <code>0</code> - which does not skip any lines.</p>
<h3 id="option-0-1">Option: &lsquo;0&rsquo;</h3>
<p>Changing the <code>skipLines</code> configuration option to <code>5</code> configures <code>YoSQL</code> skip the first 5 lines in each <code>.sql</code> file in encounters.</p>
<h2 id="related-options">Related Options</h2>
<ul>
<li><a href="../inputbasedirectory/">inputBaseDirectory</a>: The input directory for the user written SQL files.</li>
<li><a href="../outputbasedirectory/">outputBaseDirectory</a>: The output directory for the generated classes.</li>
<li><a href="../sqlfilescharset/">sqlFilesCharset</a>: The charset to use while reading .sql files.</li>
<li><a href="../sqlfilessuffix/">sqlFilesSuffix</a>: The file ending to use while searching for SQL files.</li>
<li><a href="../sqlstatementseparator/">sqlStatementSeparator</a>: The separator to split SQL statements inside a single .sql file.</li>
</ul>
<h2 id="tooling">Tooling</h2>
<h3 id="ant">Ant</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://ant.apache.org/">Ant</a>, take a look at the tooling <a href="/tooling/ant/">documentation for Ant</a>.</p>
<h3 id="bazel">Bazel</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://bazel.build/">Bazel</a>, take a look at the tooling <a href="/tooling/bazel/">documentation for Bazel</a>.</p>
<h3 id="cli">CLI</h3>
<p>In order to use <code>YoSQL</code> on the command line, take a look at the tooling <a href="/tooling/cli/">documentation for CLI</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --files-skip-lines<span class="o">=</span>configValue
</span></span></code></pre></div><p>As long as the name of the config option is unique across all configuration groups, you can use the shorter form:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --skip-lines<span class="o">=</span>configValue
</span></span></code></pre></div><h3 id="gradle">Gradle</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://gradle.org/">Gradle</a>, take a look at the tooling <a href="/tooling/gradle/">documentation for Gradle</a>. The <code>skipLines</code> setting can be configured using Gradle in Kotlin syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">java</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span><span class="p">(</span><span class="s2">&#34;wtf.metio.yosql&#34;</span><span class="p">)</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">skipLines</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="n">configValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>or in Groovy syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;java&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;wtf.metio.yosql&#34;</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">skipLines</span> <span class="o">=</span> <span class="n">configValue</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="maven">Maven</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://maven.apache.org/">Maven</a>, take a look at the tooling <a href="/tooling/maven/">documentation for Maven</a>. The <code>skipLines</code> setting can be configured using Maven like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>yosql-tooling-maven<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2023.2.22<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;files&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;skipLines&gt;</span>configValue<span class="nt">&lt;/skipLines&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/files&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/configuration" term="configuration" label="Configuration"/><category scheme="https://yosql.projects.metio.wtf/tags/files" term="files" label="files"/></entry><entry><title type="html">sqlFilesCharset</title><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilescharset/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/configuration/files/inputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="inputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/outputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="outputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/skiplines/?utm_source=atom_feed" rel="related" type="text/html" title="skipLines"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilessuffix/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesSuffix"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlstatementseparator/?utm_source=atom_feed" rel="related" type="text/html" title="sqlStatementSeparator"/><id>https://yosql.projects.metio.wtf/configuration/files/sqlfilescharset/</id><published>2024-01-14T00:00:00+00:00</published><updated>2024-01-14T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The charset to use while reading .sql files.</p>
<h2 id="configuration-options">Configuration Options</h2>
<h3 id="option-utf-8">Option: &lsquo;UTF-8&rsquo;</h3>
<p>The default value of the <code>sqlFilesCharset</code> configuration option is <code>UTF-8</code> which should work on most systems.</p>
<h3 id="option-iso-8859-1">Option: &lsquo;ISO-8859-1&rsquo;</h3>
<p>Changing the <code>sqlFilesCharset</code> configuration option to <code>ISO-8859-1</code> configures <code>YoSQL</code> to use the <code>ISO-8859-1</code> charset while reading your <code>.sql</code> files.</p>
<h2 id="related-options">Related Options</h2>
<ul>
<li><a href="../inputbasedirectory/">inputBaseDirectory</a>: The input directory for the user written SQL files.</li>
<li><a href="../outputbasedirectory/">outputBaseDirectory</a>: The output directory for the generated classes.</li>
<li><a href="../skiplines/">skipLines</a>: The number of lines to skip in each file (e.g. a copyright header).</li>
<li><a href="../sqlfilessuffix/">sqlFilesSuffix</a>: The file ending to use while searching for SQL files.</li>
<li><a href="../sqlstatementseparator/">sqlStatementSeparator</a>: The separator to split SQL statements inside a single .sql file.</li>
</ul>
<h2 id="tooling">Tooling</h2>
<h3 id="ant">Ant</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://ant.apache.org/">Ant</a>, take a look at the tooling <a href="/tooling/ant/">documentation for Ant</a>.</p>
<h3 id="bazel">Bazel</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://bazel.build/">Bazel</a>, take a look at the tooling <a href="/tooling/bazel/">documentation for Bazel</a>.</p>
<h3 id="cli">CLI</h3>
<p>In order to use <code>YoSQL</code> on the command line, take a look at the tooling <a href="/tooling/cli/">documentation for CLI</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --files-sql-files-charset<span class="o">=</span>configValue
</span></span></code></pre></div><p>As long as the name of the config option is unique across all configuration groups, you can use the shorter form:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --sql-files-charset<span class="o">=</span>configValue
</span></span></code></pre></div><h3 id="gradle">Gradle</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://gradle.org/">Gradle</a>, take a look at the tooling <a href="/tooling/gradle/">documentation for Gradle</a>. The <code>sqlFilesCharset</code> setting can be configured using Gradle in Kotlin syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">java</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span><span class="p">(</span><span class="s2">&#34;wtf.metio.yosql&#34;</span><span class="p">)</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlFilesCharset</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="n">configValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>or in Groovy syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;java&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;wtf.metio.yosql&#34;</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlFilesCharset</span> <span class="o">=</span> <span class="n">configValue</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="maven">Maven</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://maven.apache.org/">Maven</a>, take a look at the tooling <a href="/tooling/maven/">documentation for Maven</a>. The <code>sqlFilesCharset</code> setting can be configured using Maven like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>yosql-tooling-maven<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2023.2.22<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;files&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;sqlFilesCharset&gt;</span>configValue<span class="nt">&lt;/sqlFilesCharset&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/files&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/configuration" term="configuration" label="Configuration"/><category scheme="https://yosql.projects.metio.wtf/tags/files" term="files" label="files"/></entry><entry><title type="html">sqlFilesSuffix</title><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilessuffix/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/configuration/files/inputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="inputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/outputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="outputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/skiplines/?utm_source=atom_feed" rel="related" type="text/html" title="skipLines"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilescharset/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesCharset"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlstatementseparator/?utm_source=atom_feed" rel="related" type="text/html" title="sqlStatementSeparator"/><id>https://yosql.projects.metio.wtf/configuration/files/sqlfilessuffix/</id><published>2024-01-14T00:00:00+00:00</published><updated>2024-01-14T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The file ending to use while searching for SQL files.</p>
<h2 id="configuration-options">Configuration Options</h2>
<h3 id="option-sql">Option: &lsquo;.sql&rsquo;</h3>
<p>The default value of the <code>sqlFilesSuffix</code> configuration option is <code>.sql</code>. It matches all files that end with <code>.sql</code>.</p>
<h3 id="option-other">Option: &lsquo;.other&rsquo;</h3>
<p>Changing the <code>sqlFilesSuffix</code> configuration option to <code>.other</code> configures <code>YoSQL</code> look for files that end in <code>.other</code>.</p>
<h2 id="related-options">Related Options</h2>
<ul>
<li><a href="../inputbasedirectory/">inputBaseDirectory</a>: The input directory for the user written SQL files.</li>
<li><a href="../outputbasedirectory/">outputBaseDirectory</a>: The output directory for the generated classes.</li>
<li><a href="../skiplines/">skipLines</a>: The number of lines to skip in each file (e.g. a copyright header).</li>
<li><a href="../sqlfilescharset/">sqlFilesCharset</a>: The charset to use while reading .sql files.</li>
<li><a href="../sqlstatementseparator/">sqlStatementSeparator</a>: The separator to split SQL statements inside a single .sql file.</li>
</ul>
<h2 id="tooling">Tooling</h2>
<h3 id="ant">Ant</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://ant.apache.org/">Ant</a>, take a look at the tooling <a href="/tooling/ant/">documentation for Ant</a>.</p>
<h3 id="bazel">Bazel</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://bazel.build/">Bazel</a>, take a look at the tooling <a href="/tooling/bazel/">documentation for Bazel</a>.</p>
<h3 id="cli">CLI</h3>
<p>In order to use <code>YoSQL</code> on the command line, take a look at the tooling <a href="/tooling/cli/">documentation for CLI</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --files-sql-files-suffix<span class="o">=</span>configValue
</span></span></code></pre></div><p>As long as the name of the config option is unique across all configuration groups, you can use the shorter form:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --sql-files-suffix<span class="o">=</span>configValue
</span></span></code></pre></div><h3 id="gradle">Gradle</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://gradle.org/">Gradle</a>, take a look at the tooling <a href="/tooling/gradle/">documentation for Gradle</a>. The <code>sqlFilesSuffix</code> setting can be configured using Gradle in Kotlin syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">java</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span><span class="p">(</span><span class="s2">&#34;wtf.metio.yosql&#34;</span><span class="p">)</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlFilesSuffix</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="n">configValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>or in Groovy syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;java&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;wtf.metio.yosql&#34;</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlFilesSuffix</span> <span class="o">=</span> <span class="n">configValue</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="maven">Maven</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://maven.apache.org/">Maven</a>, take a look at the tooling <a href="/tooling/maven/">documentation for Maven</a>. The <code>sqlFilesSuffix</code> setting can be configured using Maven like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>yosql-tooling-maven<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2023.2.22<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;files&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;sqlFilesSuffix&gt;</span>configValue<span class="nt">&lt;/sqlFilesSuffix&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/files&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/configuration" term="configuration" label="Configuration"/><category scheme="https://yosql.projects.metio.wtf/tags/files" term="files" label="files"/></entry><entry><title type="html">sqlStatementSeparator</title><link href="https://yosql.projects.metio.wtf/configuration/files/sqlstatementseparator/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/configuration/files/inputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="inputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/outputbasedirectory/?utm_source=atom_feed" rel="related" type="text/html" title="outputBaseDirectory"/><link href="https://yosql.projects.metio.wtf/configuration/files/skiplines/?utm_source=atom_feed" rel="related" type="text/html" title="skipLines"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilescharset/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesCharset"/><link href="https://yosql.projects.metio.wtf/configuration/files/sqlfilessuffix/?utm_source=atom_feed" rel="related" type="text/html" title="sqlFilesSuffix"/><id>https://yosql.projects.metio.wtf/configuration/files/sqlstatementseparator/</id><published>2024-01-14T00:00:00+00:00</published><updated>2024-01-14T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The separator to split SQL statements inside a single .sql file.</p>
<h2 id="configuration-options">Configuration Options</h2>
<h3 id="option-">Option: &lsquo;;&rsquo;</h3>
<p>The default value of the <code>sqlStatementSeparator</code> configuration option is <code>.sql</code>. It matches all files that end with <code>.sql</code>.</p>
<h3 id="option--1">Option: &lsquo;|&rsquo;</h3>
<p>Changing the <code>sqlStatementSeparator</code> configuration option to <code>|</code> configures <code>YoSQL</code> split <code>.sql</code> files using the <code>|</code> character.</p>
<h2 id="related-options">Related Options</h2>
<ul>
<li><a href="../inputbasedirectory/">inputBaseDirectory</a>: The input directory for the user written SQL files.</li>
<li><a href="../outputbasedirectory/">outputBaseDirectory</a>: The output directory for the generated classes.</li>
<li><a href="../skiplines/">skipLines</a>: The number of lines to skip in each file (e.g. a copyright header).</li>
<li><a href="../sqlfilescharset/">sqlFilesCharset</a>: The charset to use while reading .sql files.</li>
<li><a href="../sqlfilessuffix/">sqlFilesSuffix</a>: The file ending to use while searching for SQL files.</li>
</ul>
<h2 id="tooling">Tooling</h2>
<h3 id="ant">Ant</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://ant.apache.org/">Ant</a>, take a look at the tooling <a href="/tooling/ant/">documentation for Ant</a>.</p>
<h3 id="bazel">Bazel</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://bazel.build/">Bazel</a>, take a look at the tooling <a href="/tooling/bazel/">documentation for Bazel</a>.</p>
<h3 id="cli">CLI</h3>
<p>In order to use <code>YoSQL</code> on the command line, take a look at the tooling <a href="/tooling/cli/">documentation for CLI</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --files-sql-statement-separator<span class="o">=</span>configValue
</span></span></code></pre></div><p>As long as the name of the config option is unique across all configuration groups, you can use the shorter form:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> yosql --sql-statement-separator<span class="o">=</span>configValue
</span></span></code></pre></div><h3 id="gradle">Gradle</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://gradle.org/">Gradle</a>, take a look at the tooling <a href="/tooling/gradle/">documentation for Gradle</a>. The <code>sqlStatementSeparator</code> setting can be configured using Gradle in Kotlin syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-kotlin" data-lang="kotlin"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">java</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span><span class="p">(</span><span class="s2">&#34;wtf.metio.yosql&#34;</span><span class="p">)</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlStatementSeparator</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="n">configValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>or in Groovy syntax like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;java&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s2">&#34;wtf.metio.yosql&#34;</span> <span class="n">version</span> <span class="s2">&#34;2023.2.22&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yosql</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">files</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlStatementSeparator</span> <span class="o">=</span> <span class="n">configValue</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="maven">Maven</h3>
<p>In order to use <code>YoSQL</code> together with <a href="https://maven.apache.org/">Maven</a>, take a look at the tooling <a href="/tooling/maven/">documentation for Maven</a>. The <code>sqlStatementSeparator</code> setting can be configured using Maven like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>wtf.metio.yosql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>yosql-tooling-maven<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2023.2.22<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;files&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;sqlStatementSeparator&gt;</span>configValue<span class="nt">&lt;/sqlStatementSeparator&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/files&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/build&gt;</span>
</span></span></code></pre></div>]]></content><category scheme="https://yosql.projects.metio.wtf/categories/configuration" term="configuration" label="Configuration"/><category scheme="https://yosql.projects.metio.wtf/tags/files" term="files" label="files"/></entry><entry><title type="html">SQL Files</title><link href="https://yosql.projects.metio.wtf/sql/sql-files/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yosql.projects.metio.wtf/sql/structure/?utm_source=atom_feed" rel="related" type="text/html" title="Structure"/><id>https://yosql.projects.metio.wtf/sql/sql-files/</id><published>2019-07-07T14:27:54+02:00</published><updated>2019-07-07T14:27:54+02:00</updated><content type="html"><![CDATA[<p>Writing <code>.sql</code> files is the essential work that needs to be done in order to use <code>YoSQL</code>. Each file can contain multiple SQL statements. Each statement has its own configuration and metadata attached to it.</p>
<h2 id="statement-type">Statement Type</h2>
<p><code>YoSQL</code> supports the tree types of SQL statements and is able to generate code for them: <code>READING</code> for SQL statements that read data, <code>WRITING</code> for SQL statements that write data, and <code>CALLING</code> for SQL statements that call stored procedures.</p>
<p>In order to correctly guess which type your statement is, <code>YoSQL</code> does not parse your SQL code, but uses the file name of your <code>.sql</code> files or the <code>name</code> front matter. It applies the following rules to determine the statement type from its name:</p>
<ul>
<li>All names that start with the <a href="/configuration/repositories/allowedreadprefixes/">configured read prefixes</a> are assigned the <code>READING</code> type.</li>
<li>All names that start with the <a href="/configuration/repositories/allowedwriteprefixes/">configured write prefixes</a> are assigned the <code>WRITING</code> type.</li>
<li>All names that start with the <a href="/configuration/repositories/allowedcallprefixes/">configured call prefixes</a> are assigned the <code>CALLING</code> type.</li>
</ul>
<p>SQL statements that cannot be mapped to one of the available types <strong>are not considered</strong> while generating code! You can always overwrite that guess with a specific <a href="/configuration/sql/type/">type</a> value in your front matter. This can be useful if you want to use a special name for your statement, but don&rsquo;t want to adhere to the configured prefixes. On the other hand, enable <a href="/configuration/repositories/validatemethodnameprefixes/">validateMethodNamePrefixes</a> to enforce that all statements are named accordingly to the configured prefixes.</p>
<h2 id="front-matter">Front Matter</h2>
<p>Each SQL statement can have an optional front matter section written in YAML that is placed inside an SQL comment. Configuration options that are specified in a front matter of an SQL statement overwrite the same option that was specified globally, e.g. in a <code>pom.xml</code>/<code>build.gradle</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- name: someName
</span></span></span><span class="line"><span class="cl"><span class="c1">-- description: Retrieves a single user
</span></span></span><span class="line"><span class="cl"><span class="c1">-- repository: com.example.persistence.YourRepository
</span></span></span><span class="line"><span class="cl"><span class="c1">-- vendor: H2
</span></span></span><span class="line"><span class="cl"><span class="c1">-- parameters:
</span></span></span><span class="line"><span class="cl"><span class="c1">--   - name: userId
</span></span></span><span class="line"><span class="cl"><span class="c1">--     type: int
</span></span></span><span class="line"><span class="cl"><span class="c1">-- type: reading
</span></span></span><span class="line"><span class="cl"><span class="c1">-- returning: one
</span></span></span><span class="line"><span class="cl"><span class="c1">-- catchAndRethrow: true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w">  </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w">    </span><span class="n">users</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w">   </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">:</span><span class="n">userId</span><span class="w">
</span></span></span></code></pre></div><p>While parsing your <code>.sql</code> files, <code>YoSQL</code> will strip the SQL comment prefix (<code>--</code>) and read the remaining text as a YAML object. The available configuration options that can be used in the front matter, can be seen <a href="/configuration/sql/">here</a>.</p>
<h2 id="file-extension">File Extension</h2>
<p>By default, <code>YoSQL</code> only considers files that end in <code>.sql</code>, but this can be configured using the <a href="/configuration/files/sqlfilessuffix">sqlFilesSuffix</a> option. Lots of editors have built-in syntax support for SQL and they auto-enable that once you open an <code>.sql</code> file, so we recommend to stick to the default and only change if it necessary.</p>
<h2 id="file-charset">File Charset</h2>
<p>By default, <code>YoSQL</code> uses the <strong>UTF-8</strong> charset. In order to change this, use the <a href="/configuration/files/sqlfilescharset">sqlFilesCharset</a> option.</p>
<h2 id="statement-separator">Statement Separator</h2>
<p>By default, <code>YoSQL</code> uses <code>;</code> to separate multiple SQL statements within a single file. In order to change this, use the <a href="/configuration/files/sqlstatementseparator">sqlStatementSeparator</a> option.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- name: firstStatement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w">  </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w">    </span><span class="n">users</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w">   </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">:</span><span class="n">userId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- name: secondStatement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w">  </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w">    </span><span class="n">customers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w">   </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">:</span><span class="n">customerId</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h2 id="license-headers">License Headers</h2>
<p>In case your <code>.sql</code> files contain a license header, use the <a href="/configuration/files/skiplines">skipLines</a> option to skip those initial lines. Otherwise <code>YoSQL</code> will consider those lines to be part of the first statement in your <code>.sql</code> file.</p>
]]></content><category scheme="https://yosql.projects.metio.wtf/categories/sql" term="sql" label="SQL"/><category scheme="https://yosql.projects.metio.wtf/tags/sql" term="sql" label="sql"/><category scheme="https://yosql.projects.metio.wtf/tags/files" term="files" label="files"/></entry><entry><title type="html">Structure</title><link href="https://yosql.projects.metio.wtf/sql/structure/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/sql/structure/</id><published>2019-06-16T18:33:06+02:00</published><updated>2019-06-16T18:33:06+02:00</updated><content type="html"><![CDATA[<p>In order to call your SQL statement, a Java class must be created that contains methods for each of your statements. <code>YoSQL</code> will try to detect which repository your SQL statements will end up in. Based on the <a href="/configuration/files/inputbasedirectory/">inputBaseDirectory</a> configuration option, your project structure could look like this:</p>
<pre tabindex="0"><code>&lt;inputBaseDirectory&gt;/
└── user/
    └── getAllUsers.sql
</code></pre><p>Based on the above example, <code>YoSQL</code> will determine that you want a method called <code>getAllUsers</code> in a repository called <code>UserRepository</code>. Use the <a href="/configuration/repositories/basepackagename/">basePackageName</a> option to change the base package name for all generated repositories. Together they will form the fully qualified name <code>&lt;basePackageName&gt;.UserRepository</code>.</p>
<pre tabindex="0"><code>&lt;inputBaseDirectory&gt;/
└── internal/
    └── user/
        └── getAllUsers.sql
</code></pre><p>Nested package structures are supported as well - they are simply interpreted as subpackages, that are appended to the <a href="/configuration/repositories/basepackagename/">basePackageName</a> option to form the fully qualified name <code>&lt;basePackageName&gt;.internal.UserRepository</code>.</p>
<pre tabindex="0"><code>&lt;inputBaseDirectory&gt;/
  └── user/
    └── vips/
        └── findSpecialUsers.sql
    └── getAllUsers.sql
</code></pre><p>Nesting repositories within other repositories is supported as well - <code>YoSql</code> will create two repositories for the above example: <code>&lt;basePackageName&gt;.UserRepository</code> with a method called <code>getAllUsers</code> and <code>&lt;basePackageName&gt;.user.VipsRepository</code> with a method called <code>findSpecialUsers</code>.</p>
<pre tabindex="0"><code>&lt;inputBaseDirectory&gt;/
└── internal/
    └── user/
        └── getAllUsers.sql
└── user/
    └── findUser.sql
</code></pre><p>Mixing nested and non-nested repositories work as well. The above example will generate the two repositories <code>&lt;basePackageName&gt;.internal.UserRepository</code> and <code>&lt;basePackageName&gt;.UserRepository</code>.</p>
<pre tabindex="0"><code>&lt;inputBaseDirectory&gt;/
└── allQueries.sql
</code></pre><p>Smaller projects might just want to use a single <code>.sql</code> file that contains all of your queries. In case none of your SQL statements change their target repository in their <a href="../sql-files/">front matter</a>, all queries in the above structure will end up in a class called <code>&lt;basePackageName&gt;.Repository</code>.</p>
<pre tabindex="0"><code>&lt;inputBaseDirectory&gt;/
└── internal/
    └── user/
        └── vips/
            └── findSpecialUsers.sql
        └── getAllUsers.sql
└── user/
    └── findUser.sql
└── lotsOfQueries.sql
</code></pre><p>Mixing all options is of course supported as well - we recommend using any structure that best fits to your project/team. One statement per file makes it easier to quickly find single statements, however grouping multiple statements together in one file might make sense for multiple reasons, e.g. a statement might have multiple variants based on the used database or any other set of statements that are usually changed together as a single unit.</p>
]]></content><category scheme="https://yosql.projects.metio.wtf/categories/sql" term="sql" label="SQL"/><category scheme="https://yosql.projects.metio.wtf/tags/repositories" term="repositories" label="repositories"/><category scheme="https://yosql.projects.metio.wtf/tags/files" term="files" label="files"/><category scheme="https://yosql.projects.metio.wtf/tags/structure" term="structure" label="structure"/></entry></feed>