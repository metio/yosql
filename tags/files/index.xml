<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>files on YoSQL</title><link>https://yosql.projects.metio.wtf/tags/files/</link><description>Recent content in files on YoSQL</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 14 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://yosql.projects.metio.wtf/tags/files/index.xml" rel="self" type="application/rss+xml"/><item><title>Files</title><link>https://yosql.projects.metio.wtf/configuration/files/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/files/</guid><description>Configures how files are handled.</description></item><item><title>inputBaseDirectory</title><link>https://yosql.projects.metio.wtf/configuration/files/inputbasedirectory/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/files/inputbasedirectory/</guid><description>The input directory for the user written SQL files.
Configuration Options Option: &amp;lsquo;.&amp;rsquo; The default value of the inputBaseDirectory configuration option used by the Ant- and CLI-tooling is . - the current directory.
Option: &amp;lsquo;src/main/yosql&amp;rsquo; The default value of the inputBaseDirectory configuration option used by the Gradle- and Maven-tooling is src/main/yosql to better reflect the commonly used project structure expected by those tools.
Option: &amp;lsquo;some/other/directory&amp;rsquo; Changing the inputBaseDirectory configuration option to some/other/directory!</description></item><item><title>outputBaseDirectory</title><link>https://yosql.projects.metio.wtf/configuration/files/outputbasedirectory/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/files/outputbasedirectory/</guid><description>The output directory for the generated classes.
Configuration Options Option: &amp;lsquo;.&amp;rsquo; The default value of the outputBaseDirectory configuration option is . - the current directory. Note that tooling may change the default output base directory to better reflect a typical project structure used with such a tool.
Option: &amp;lsquo;some/other/directory&amp;rsquo; Changing the outputBaseDirectory configuration option to some/other/directory! configures YoSQL to write into the relative directorysome/other/directory.
Option: &amp;lsquo;/an/absolute/path&amp;rsquo; Changing the outputBaseDirectory configuration option to /an/absolute/path!</description></item><item><title>skipLines</title><link>https://yosql.projects.metio.wtf/configuration/files/skiplines/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/files/skiplines/</guid><description>The number of lines to skip in each file (e.g. a copyright header).
Configuration Options Option: &amp;lsquo;0&amp;rsquo; The default value of the skipLines configuration option is 0 - which does not skip any lines.
Option: &amp;lsquo;0&amp;rsquo; Changing the skipLines configuration option to 5 configures YoSQL skip the first 5 lines in each .sql file in encounters.
Related Options inputBaseDirectory: The input directory for the user written SQL files. outputBaseDirectory: The output directory for the generated classes.</description></item><item><title>sqlFilesCharset</title><link>https://yosql.projects.metio.wtf/configuration/files/sqlfilescharset/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/files/sqlfilescharset/</guid><description>The charset to use while reading .sql files.
Configuration Options Option: &amp;lsquo;UTF-8&amp;rsquo; The default value of the sqlFilesCharset configuration option is UTF-8 which should work on most systems.
Option: &amp;lsquo;ISO-8859-1&amp;rsquo; Changing the sqlFilesCharset configuration option to ISO-8859-1 configures YoSQL to use the ISO-8859-1 charset while reading your .sql files.
Related Options inputBaseDirectory: The input directory for the user written SQL files. outputBaseDirectory: The output directory for the generated classes. skipLines: The number of lines to skip in each file (e.</description></item><item><title>sqlFilesSuffix</title><link>https://yosql.projects.metio.wtf/configuration/files/sqlfilessuffix/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/files/sqlfilessuffix/</guid><description>The file ending to use while searching for SQL files.
Configuration Options Option: &amp;lsquo;.sql&amp;rsquo; The default value of the sqlFilesSuffix configuration option is .sql. It matches all files that end with .sql.
Option: &amp;lsquo;.other&amp;rsquo; Changing the sqlFilesSuffix configuration option to .other configures YoSQL look for files that end in .other.
Related Options inputBaseDirectory: The input directory for the user written SQL files. outputBaseDirectory: The output directory for the generated classes. skipLines: The number of lines to skip in each file (e.</description></item><item><title>sqlStatementSeparator</title><link>https://yosql.projects.metio.wtf/configuration/files/sqlstatementseparator/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/files/sqlstatementseparator/</guid><description>The separator to split SQL statements inside a single .sql file.
Configuration Options Option: &amp;lsquo;;&amp;rsquo; The default value of the sqlStatementSeparator configuration option is .sql. It matches all files that end with .sql.
Option: &amp;lsquo;|&amp;rsquo; Changing the sqlStatementSeparator configuration option to | configures YoSQL split .sql files using the | character.
Related Options inputBaseDirectory: The input directory for the user written SQL files. outputBaseDirectory: The output directory for the generated classes.</description></item><item><title>SQL Files</title><link>https://yosql.projects.metio.wtf/sql/sql-files/</link><pubDate>Sun, 07 Jul 2019 14:27:54 +0200</pubDate><guid>https://yosql.projects.metio.wtf/sql/sql-files/</guid><description>Writing .sql files is the essential work that needs to be done in order to use YoSQL. Each file can contain multiple SQL statements. Each statement has its own configuration and metadata attached to it.
Statement Type YoSQL supports the tree types of SQL statements and is able to generate code for them: READING for SQL statements that read data, WRITING for SQL statements that write data, and CALLING for SQL statements that call stored procedures.</description></item><item><title>Structure</title><link>https://yosql.projects.metio.wtf/sql/structure/</link><pubDate>Sun, 16 Jun 2019 18:33:06 +0200</pubDate><guid>https://yosql.projects.metio.wtf/sql/structure/</guid><description>In order to call your SQL statement, a Java class must be created that contains methods for each of your statements. YoSQL will try to detect which repository your SQL statements will end up in. Based on the inputBaseDirectory configuration option, your project structure could look like this:
&amp;lt;inputBaseDirectory&amp;gt;/ └── user/ └── getAllUsers.sql Based on the above example, YoSQL will determine that you want a method called getAllUsers in a repository called UserRepository.</description></item></channel></rss>