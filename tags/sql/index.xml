<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sql on YoSQL</title><link>https://yosql.projects.metio.wtf/tags/sql/</link><description>Recent content in sql on YoSQL</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 14 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://yosql.projects.metio.wtf/tags/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>annotations</title><link>https://yosql.projects.metio.wtf/configuration/sql/annotations/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/annotations/</guid><description>The additional annotations to be placed on generated methods.
This list is empty by default and thus no annotations are added to generated methods.
Configuration Options Option: &amp;lsquo;your.own.Annotation&amp;rsquo; In order to add an annotation to the generated methods, specify its fully-qualified name.
package com.example.persistence; import your.own.Annotation; public class SomeRepository { @Annotation public void someMethod() { // ... some code } // ... rest of generated code } Option: &amp;lsquo;your.other.Annotation&amp;rsquo; In order to add an annotation with some member, specify name of the annotation member, its value, and its type.</description></item><item><title>catchAndRethrow</title><link>https://yosql.projects.metio.wtf/configuration/sql/catchandrethrow/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/catchandrethrow/</guid><description>Catch exceptions during SQL execution and re-throw them as RuntimeExceptions
Configuration Options Option: &amp;rsquo;true' The default value for catchAndRethrow is true. This will catch any SQLException that happen during SQL execution and re-throw them as RuntimeExceptions.
package com.example.persistence; public class SomeRepository { public void writeSome() { // ... some code } // ... rest of generated code } Option: &amp;lsquo;false&amp;rsquo; In case you want to handle SQLExceptions yourself, set catchAndRethrow to false.</description></item><item><title>createConnection</title><link>https://yosql.projects.metio.wtf/configuration/sql/createconnection/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/createconnection/</guid><description>Controls whether the generated code should create/open connection itself or use a given connection.
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions description: The description for the SQL statement executeBatch: Generate methods that are executed as batch executeBatchPrefix: The method prefix to use for generated methods that execute in a batch. executeBatchSuffix: The method suffix to use for generated methods that execute in a batch.</description></item><item><title>description</title><link>https://yosql.projects.metio.wtf/configuration/sql/description/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/description/</guid><description>The description for the SQL statement
Configuration Options Option: &amp;lsquo;Some random description&amp;rsquo; In case you use the description option, YoSQL will use the supplied value as a JavaDoc comment
package com.example.persistence; public class SomeRepository { /** * Some random description */ public void someMethod() { // ... some code } // ... rest of generated code } Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection.</description></item><item><title>executeBatch</title><link>https://yosql.projects.metio.wtf/configuration/sql/executebatch/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/executebatch/</guid><description>Generate methods that are executed as batch
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection. description: The description for the SQL statement executeBatchPrefix: The method prefix to use for generated methods that execute in a batch. executeBatchSuffix: The method suffix to use for generated methods that execute in a batch.</description></item><item><title>executeBatchPrefix</title><link>https://yosql.projects.metio.wtf/configuration/sql/executebatchprefix/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/executebatchprefix/</guid><description>The method prefix to use for generated methods that execute in a batch.
Configuration Options Option: '' The default value for executeBatchPrefix is the empty string. It does not add any prefix in front of batch methods.
package com.example.persistence; public class SomeRepository { public void writeSomeBatch() { // ... some code } // ... rest of generated code } Option: &amp;lsquo;myPrefix&amp;rsquo; In case you want to prefix batch methods with something, set the executeBatchPrefix option.</description></item><item><title>executeBatchSuffix</title><link>https://yosql.projects.metio.wtf/configuration/sql/executebatchsuffix/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/executebatchsuffix/</guid><description>The method suffix to use for generated methods that execute in a batch.
Configuration Options Option: &amp;lsquo;Batch&amp;rsquo; The default value for executeBatchSuffix is &amp;lsquo;Batch&amp;rsquo;. It adds the word &amp;lsquo;Batch&amp;rsquo; after each batch method.
package com.example.persistence; public class SomeRepository { public void writeSomeBatch() { // ... some code } // ... rest of generated code } Option: &amp;lsquo;Other&amp;rsquo; In case you want to suffix batch methods with something else, set the executeBatchSuffix option.</description></item><item><title>executeOnce</title><link>https://yosql.projects.metio.wtf/configuration/sql/executeonce/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/executeonce/</guid><description>Generate methods that are executed once with the given parameters
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection. description: The description for the SQL statement executeBatch: Generate methods that are executed as batch executeBatchPrefix: The method prefix to use for generated methods that execute in a batch.</description></item><item><title>executeOncePrefix</title><link>https://yosql.projects.metio.wtf/configuration/sql/executeonceprefix/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/executeonceprefix/</guid><description>The method prefix to use for generated methods that execute once.
Configuration Options Option: '' The default value for executeOncePrefix is the empty string. It does not add any prefix in front of methods that are executed once.
package com.example.persistence; public class SomeRepository { public void writeSome() { // ... some code } // ... rest of generated code } Option: &amp;lsquo;myPrefix&amp;rsquo; In case you want to prefix methods that execute once with something, set the executeOncePrefix option.</description></item><item><title>executeOnceSuffix</title><link>https://yosql.projects.metio.wtf/configuration/sql/executeoncesuffix/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/executeoncesuffix/</guid><description>The method suffix to use for generated methods that execute once.
Configuration Options Option: '' The default value for executeOnceSuffix is the empty string. It does not add any suffix after methods that execute once.
package com.example.persistence; public class SomeRepository { public void writeSome() { // ... some code } // ... rest of generated code } Option: &amp;lsquo;mySuffix&amp;rsquo; In case you want to suffix methods that execute once with something, set the executeOnceSuffix option.</description></item><item><title>name</title><link>https://yosql.projects.metio.wtf/configuration/sql/name/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/name/</guid><description>The name of the SQL statement
Configuration Options Option: &amp;lsquo;yourSpecialName&amp;rsquo; In case you use the name option, YoSQL will use the supplied value as a method name
package com.example.persistence; public class SomeRepository { public void yourSpecialName() { // ... some code } // ... rest of generated code } Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection.</description></item><item><title>parameters</title><link>https://yosql.projects.metio.wtf/configuration/sql/parameters/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/parameters/</guid><description>The parameters of the SQL statement.
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection. description: The description for the SQL statement executeBatch: Generate methods that are executed as batch executeBatchPrefix: The method prefix to use for generated methods that execute in a batch.</description></item><item><title>repository</title><link>https://yosql.projects.metio.wtf/configuration/sql/repository/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/repository/</guid><description>The fully qualified name of the target repository class.
In order to overwrite the target repository of a single SQL statement, use the repository option. You can specify the fully qualified name of the repository that should contain your statement, or you can just specify the name of the class and YoSQL will automatically add the base package name as well as the repositoryNamePrefix and repositoryNameSuffix for you.
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods.</description></item><item><title>resultRowConverter</title><link>https://yosql.projects.metio.wtf/configuration/sql/resultrowconverter/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/resultrowconverter/</guid><description>The alias or fully-qualified name of the converter to use
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection. description: The description for the SQL statement executeBatch: Generate methods that are executed as batch executeBatchPrefix: The method prefix to use for generated methods that execute in a batch.</description></item><item><title>returningMode</title><link>https://yosql.projects.metio.wtf/configuration/sql/returningmode/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/returningmode/</guid><description>The returning mode of the SQL statement.
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection. description: The description for the SQL statement executeBatch: Generate methods that are executed as batch executeBatchPrefix: The method prefix to use for generated methods that execute in a batch.</description></item><item><title>Sql</title><link>https://yosql.projects.metio.wtf/configuration/sql/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/</guid><description>The configuration for a single SQL statement.
All of these options are to be placed in the front matter of SQL statements and their overwrite their respective counterparts in the global configuration, e.g. in repositories.</description></item><item><title>throwOnMultipleResults</title><link>https://yosql.projects.metio.wtf/configuration/sql/throwonmultipleresults/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/throwonmultipleresults/</guid><description>Throw an exception in case a statement using ReturningMode.SINGLE produces more than 1 result.
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection. description: The description for the SQL statement executeBatch: Generate methods that are executed as batch executeBatchPrefix: The method prefix to use for generated methods that execute in a batch.</description></item><item><title>type</title><link>https://yosql.projects.metio.wtf/configuration/sql/type/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/type/</guid><description>The type of the SQL statement.
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection. description: The description for the SQL statement executeBatch: Generate methods that are executed as batch executeBatchPrefix: The method prefix to use for generated methods that execute in a batch.</description></item><item><title>vendor</title><link>https://yosql.projects.metio.wtf/configuration/sql/vendor/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/vendor/</guid><description>The vendor name of the database the SQL statement is intended for
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection. description: The description for the SQL statement executeBatch: Generate methods that are executed as batch executeBatchPrefix: The method prefix to use for generated methods that execute in a batch.</description></item><item><title>writesReturnUpdateCount</title><link>https://yosql.projects.metio.wtf/configuration/sql/writesreturnupdatecount/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://yosql.projects.metio.wtf/configuration/sql/writesreturnupdatecount/</guid><description>Writing method which are using ReturningMode.NONE return the number of affected rows instead.
Configuration Options Related Options annotations: The additional annotations to be placed on generated methods. catchAndRethrow: Catch exceptions during SQL execution and re-throw them as RuntimeExceptions createConnection: Controls whether the generated code should create/open connection itself or use a given connection. description: The description for the SQL statement executeBatch: Generate methods that are executed as batch executeBatchPrefix: The method prefix to use for generated methods that execute in a batch.</description></item><item><title>SQL Files</title><link>https://yosql.projects.metio.wtf/sql/sql-files/</link><pubDate>Sun, 07 Jul 2019 14:27:54 +0200</pubDate><guid>https://yosql.projects.metio.wtf/sql/sql-files/</guid><description>Writing .sql files is the essential work that needs to be done in order to use YoSQL. Each file can contain multiple SQL statements. Each statement has its own configuration and metadata attached to it.
Statement Type YoSQL supports the tree types of SQL statements and is able to generate code for them: READING for SQL statements that read data, WRITING for SQL statements that write data, and CALLING for SQL statements that call stored procedures.</description></item></channel></rss>