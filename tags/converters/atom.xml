<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://gohugo.io/" version="0.121.2">Hugo</generator><title type="html">converters on YoSQL</title><link href="https://yosql.projects.metio.wtf/tags/converters/" rel="alternate" type="text/html" title="html"/><link href="https://yosql.projects.metio.wtf/tags/converters/index.xml" rel="alternate" type="application/rss+xml" title="rss"/><link href="https://yosql.projects.metio.wtf/tags/converters/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2024-01-14T07:19:38+00:00</updated><id>https://yosql.projects.metio.wtf/tags/converters/</id><entry><title type="html">Converters</title><link href="https://yosql.projects.metio.wtf/sql/converters/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yosql.projects.metio.wtf/sql/converters/</id><published>2019-07-07T14:27:54+02:00</published><updated>2019-07-07T14:27:54+02:00</updated><content type="html"><![CDATA[<p>The JDBC API offers no built-in object mapping mechanism. In order to use high level types of your domain, use a <strong>converter</strong> to map results to your types. Converters are just plain Java classes that have at least one method that converts a <code>java.sql.ResultSet</code> into some other type. Each converter has an alias to make it easier to reference different converters without specifying their fully qualified name.</p>
<h2 id="map-converter">Map Converter</h2>
<p>In case you do not want to use custom domain types, <code>YoSQL</code> provides a built-in default converter that returns a <code>Map&lt;String, Object&gt;</code>. That converter is declared as the <a href="../../configuration/converter/defaultconverter/">defaultConverter</a> if not otherwise specified by yourself, thus newly generated code will always return <code>Map</code>s at first. You can disable generating the mapping converter by using <a href="../../configuration/converter/generatemapconverter/">generateMapConverter</a>. You can change its location with <a href="../../configuration/converter/mapconverterclass/">mapConverterClass</a>, its method name with <a href="../../configuration/converter/mapconvertermethod/">mapConverterMethod</a> and its alias with <a href="../../configuration/converter/mapconverteralias/">mapConverterAlias</a>. Methods that use the mapping converter have a signature similar to this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">Object</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">someMethod</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">Object</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">someMethod</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">Object</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nf">someMethod</span><span class="p">()</span><span class="w">
</span></span></span></code></pre></div><h2 id="default-converter">Default Converter</h2>
<p>If not otherwise specified, generated code will use the default converter to converter between <code>java.sql.ResultSet</code> and some type declared by the configured default converter.
In case you want to adjust the converter used by all your statements, set the <a href="../../configuration/converter/defaultconverter/">defaultConverter</a> configuration option accordingly. By default, this points to the map converter mentioned above.</p>
<h2 id="custom-converter">Custom Converter</h2>
<p>In order to use your own domain types in generated code, write a custom converter like in the following example and register each custom converter using the <a href="../../configuration/converter/rowconverters/">rowConverters</a> configuration option:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span><span class="w"> </span><span class="nn">my.own</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.ResultSet</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.SQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">my.own.User</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">my.own.persistence.util.ResultState</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">UserConverter</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">User</span><span class="w"> </span><span class="nf">apply</span><span class="p">(</span><span class="n">ResultState</span><span class="w"> </span><span class="n">result</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">SQLException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">ResultSet</span><span class="w"> </span><span class="n">resultSet</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">result</span><span class="p">.</span><span class="na">getResultSet</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">User</span><span class="w"> </span><span class="n">pojo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">User</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pojo</span><span class="p">.</span><span class="na">setId</span><span class="p">(</span><span class="n">resultSet</span><span class="p">.</span><span class="na">getInt</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pojo</span><span class="p">.</span><span class="na">setName</span><span class="p">(</span><span class="n">resultSet</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">pojo</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>You can choose package, class name and method name at will. The converter method gives you full control about how you want to handle <code>ResultSet</code>s. You can use your own converter either by specifying it as the default converter mentioned above or by declaring it as a <a href="../../configuration/sql/resultrowconverter">resultRowConverter</a> with either its fully qualified name or its alias like this in the front matter of your SQL statements:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- resultRowConverter: my.own.UserConverter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w">  </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w">    </span><span class="n">users</span><span class="w">
</span></span></span></code></pre></div><p>Generated code will now use your custom converter along with the result type configured for your converter, e.g.:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Optional</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">someMethod</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">someMethod</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Stream</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">someMethod</span><span class="p">()</span><span class="w">
</span></span></span></code></pre></div><p><strong>Tip</strong>: In case you want to use custom types, but do not want to write your own converter, consider using <a href="https://simpleflatmapper.org/0102-getting-started-jdbc.html">SimpleFlatMapper</a> with its built-in support for JDBC <code>ResultSet</code>s.</p>
]]></content><category scheme="https://yosql.projects.metio.wtf/categories/sql" term="sql" label="SQL"/><category scheme="https://yosql.projects.metio.wtf/tags/converters" term="converters" label="converters"/></entry></feed>