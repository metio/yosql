package wtf.metio.yosql.internals.meta.model.data;

import com.squareup.javapoet.TypeName;
import wtf.metio.yosql.internals.meta.model.ConfigurationGroup;
import wtf.metio.yosql.internals.meta.model.ConfigurationSetting;
import wtf.metio.yosql.internals.meta.model.options.AnnotationClassOptions;

public final class Annotations {

    public static final String DEFAULT_COMMENT = "DO NOT MODIFY - automatically generated by YoSQL";

    public static ConfigurationGroup configurationGroup() {
        return ConfigurationGroup.builder()
                .setName(Annotations.class.getSimpleName())
                .setDescription("Configures how annotations are applied to the generated code.")
                .addSettings(annotateClasses())
                .addSettings(annotateFields())
                .addSettings(annotateMethods())
                .addSettings(classComment())
                .addSettings(fieldComment())
                .addSettings(methodComment())
                .addSettings(api())
                .addSettings(generatorName())
                .build();
    }

    private static ConfigurationSetting annotateClasses() {
        return ConfigurationSetting.builder()
                .setName("annotateClasses")
                .setDescription("Controls whether {@link javax.annotation.processing.Generated} annotations should be added to the generated classes.")
                .setType(TypeName.get(boolean.class))
                .setDefaultValue(false)
                .build();
    }

    private static ConfigurationSetting annotateFields() {
        return ConfigurationSetting.builder()
                .setName("annotateFields")
                .setDescription("Controls whether {@link javax.annotation.processing.Generated} annotations should be added to the generated fields.")
                .setType(TypeName.get(boolean.class))
                .setDefaultValue(false)
                .build();
    }

    private static ConfigurationSetting annotateMethods() {
        return ConfigurationSetting.builder()
                .setName("annotateMethods")
                .setDescription("Controls whether {@link javax.annotation.processing.Generated} annotations should be added to the generated methods.")
                .setType(TypeName.get(boolean.class))
                .setDefaultValue(false)
                .build();
    }

    private static ConfigurationSetting classComment() {
        return ConfigurationSetting.builder()
                .setName("classComment")
                .setDescription("Sets the comment used for annotated classes.")
                .setType(TypeName.get(String.class))
                .setDefaultValue(DEFAULT_COMMENT)
                .build();
    }

    private static ConfigurationSetting fieldComment() {
        return ConfigurationSetting.builder()
                .setName("fieldComment")
                .setDescription("Sets the comment used for annotated fields.")
                .setType(TypeName.get(String.class))
                .setDefaultValue(DEFAULT_COMMENT)
                .build();
    }

    private static ConfigurationSetting methodComment() {
        return ConfigurationSetting.builder()
                .setName("methodComment")
                .setDescription("Sets the comment used for annotated methods.")
                .setType(TypeName.get(String.class))
                .setDefaultValue(DEFAULT_COMMENT)
                .build();
    }

    private static ConfigurationSetting api() {
        return ConfigurationSetting.builder()
                .setName("api")
                .setDescription("Controls which @Generated annotation should be used.")
                .setType(TypeName.get(AnnotationClassOptions.class))
                .setDefaultValue(AnnotationClassOptions.PROCESSING_API)
                .build();
    }

    private static ConfigurationSetting generatorName() {
        return ConfigurationSetting.builder()
                .setName("generatorName")
                .setDescription("The name of the code generator")
                .setType(TypeName.get(String.class))
                .setDefaultValue("YoSQL")
                .build();
    }

    private Annotations() {
        // data class
    }

}
