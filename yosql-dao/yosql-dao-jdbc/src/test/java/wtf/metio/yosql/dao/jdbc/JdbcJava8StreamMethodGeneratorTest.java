/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at https://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.dao.jdbc;

import org.junit.jupiter.api.*;
import wtf.metio.yosql.codegen.api.ConstructorGenerator;
import wtf.metio.yosql.codegen.api.Java8StreamMethodGenerator;
import wtf.metio.yosql.testing.configs.Java;
import wtf.metio.yosql.testing.configs.Sql;

@DisplayName("JdbcJava8StreamMethodGenerator")
class JdbcJava8StreamMethodGeneratorTest {

    @Nested
    @DisplayName("using default configuration")
    class Defaults {

        private Java8StreamMethodGenerator generator;

        @BeforeEach
        void setup() {
            generator = JdbcObjectMother.java8StreamMethodGenerator(Java.defaults());
        }

        @Test
        void shouldGenerateEagerMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamEagerApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamEager(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamEager");
                      try (final var connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final var resultSet = statement.executeQuery()) {
                            final var metaData = resultSet.getMetaData();
                            final var columnCount = metaData.getColumnCount();
                            final var state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                            final var list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.asUserType(state));
                            }
                            return list.stream();
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamEagerMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

        @Test
        void shouldGenerateLazyMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamLazyApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamLazy(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamLazy");
                      try {
                        final var connection = dataSource.getConnection();
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        final var statement = connection.prepareStatement(query);
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test);
                        }
                        for (final int jdbcIndex : index.get("id")) {
                          statement.setObject(jdbcIndex, id);
                        }
                        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                          final java.lang.String executedQuery = rawQuery
                            .replace(":test", test == null ? "null" : test.toString())
                            .replace(":id", java.lang.String.valueOf(id));
                          LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                        }
                        final var resultSet = statement.executeQuery();
                        final var metaData = resultSet.getMetaData();
                        final var columnCount = metaData.getColumnCount();
                        final var state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                        return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<com.example.util.ResultRow>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final boolean tryAdvance(
                              final java.util.function.Consumer<? super com.example.util.ResultRow> action) {
                            try {
                              if (state.next()) {
                                action.accept(resultRow.asUserType(state));
                                return true;
                              }
                              return false;
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        }, false).onClose(new java.lang.Runnable() {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final void run() {
                            try {
                              resultSet.close();
                              statement.close();
                              connection.close();
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        });
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamLazyMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

    }

    @Nested
    @DisplayName("using java 4 configuration")
    class Java4 {

        private Java8StreamMethodGenerator generator;

        @BeforeEach
        void setup() {
            generator = JdbcObjectMother.java8StreamMethodGenerator(Java.java4());
        }

        @Test
        void shouldGenerateEagerMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamEagerApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamEager(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamEager");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                            final int columnCount = metaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.asUserType(state));
                            }
                            return list.stream();
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamEagerMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

        @Test
        void shouldGenerateLazyMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamLazyApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamLazy(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamLazy");
                      try {
                        final java.sql.Connection connection = dataSource.getConnection();
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        final java.sql.PreparedStatement statement = connection.prepareStatement(query);
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test);
                        }
                        for (final int jdbcIndex : index.get("id")) {
                          statement.setObject(jdbcIndex, id);
                        }
                        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                          final java.lang.String executedQuery = rawQuery
                            .replace(":test", test == null ? "null" : test.toString())
                            .replace(":id", java.lang.String.valueOf(id));
                          LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                        }
                        final java.sql.ResultSet resultSet = statement.executeQuery();
                        final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                        final int columnCount = metaData.getColumnCount();
                        final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                        return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<com.example.util.ResultRow>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final boolean tryAdvance(
                              final java.util.function.Consumer<? super com.example.util.ResultRow> action) {
                            try {
                              if (state.next()) {
                                action.accept(resultRow.asUserType(state));
                                return true;
                              }
                              return false;
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        }, false).onClose(new java.lang.Runnable() {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final void run() {
                            try {
                              resultSet.close();
                              statement.close();
                              connection.close();
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        });
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamLazyMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

    }

    @Nested
    @DisplayName("using java 5 configuration")
    class Java5 {

        private Java8StreamMethodGenerator generator;

        @BeforeEach
        void setup() {
            generator = JdbcObjectMother.java8StreamMethodGenerator(Java.java5());
        }

        @Test
        void shouldGenerateEagerMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamEagerApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamEager(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamEager");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                            final int columnCount = metaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.asUserType(state));
                            }
                            return list.stream();
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamEagerMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

        @Test
        void shouldGenerateLazyMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamLazyApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamLazy(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamLazy");
                      try {
                        final java.sql.Connection connection = dataSource.getConnection();
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        final java.sql.PreparedStatement statement = connection.prepareStatement(query);
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test);
                        }
                        for (final int jdbcIndex : index.get("id")) {
                          statement.setObject(jdbcIndex, id);
                        }
                        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                          final java.lang.String executedQuery = rawQuery
                            .replace(":test", test == null ? "null" : test.toString())
                            .replace(":id", java.lang.String.valueOf(id));
                          LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                        }
                        final java.sql.ResultSet resultSet = statement.executeQuery();
                        final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                        final int columnCount = metaData.getColumnCount();
                        final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                        return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<com.example.util.ResultRow>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final boolean tryAdvance(
                              final java.util.function.Consumer<? super com.example.util.ResultRow> action) {
                            try {
                              if (state.next()) {
                                action.accept(resultRow.asUserType(state));
                                return true;
                              }
                              return false;
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        }, false).onClose(new java.lang.Runnable() {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final void run() {
                            try {
                              resultSet.close();
                              statement.close();
                              connection.close();
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        });
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamLazyMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

    }

    @Nested
    @DisplayName("using java 7 configuration")
    class Java7 {

        private Java8StreamMethodGenerator generator;

        @BeforeEach
        void setup() {
            generator = JdbcObjectMother.java8StreamMethodGenerator(Java.java7());
        }

        @Test
        void shouldGenerateEagerMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamEagerApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamEager(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamEager");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                            final int columnCount = metaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.asUserType(state));
                            }
                            return list.stream();
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamEagerMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

        @Test
        void shouldGenerateLazyMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamLazyApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamLazy(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamLazy");
                      try {
                        final java.sql.Connection connection = dataSource.getConnection();
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        final java.sql.PreparedStatement statement = connection.prepareStatement(query);
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test);
                        }
                        for (final int jdbcIndex : index.get("id")) {
                          statement.setObject(jdbcIndex, id);
                        }
                        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                          final java.lang.String executedQuery = rawQuery
                            .replace(":test", test == null ? "null" : test.toString())
                            .replace(":id", java.lang.String.valueOf(id));
                          LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                        }
                        final java.sql.ResultSet resultSet = statement.executeQuery();
                        final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                        final int columnCount = metaData.getColumnCount();
                        final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                        return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<com.example.util.ResultRow>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final boolean tryAdvance(
                              final java.util.function.Consumer<? super com.example.util.ResultRow> action) {
                            try {
                              if (state.next()) {
                                action.accept(resultRow.asUserType(state));
                                return true;
                              }
                              return false;
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        }, false).onClose(new java.lang.Runnable() {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final void run() {
                            try {
                              resultSet.close();
                              statement.close();
                              connection.close();
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        });
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamLazyMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

    }

    @Nested
    @DisplayName("using java 8 configuration")
    class Java8 {

        private Java8StreamMethodGenerator generator;

        @BeforeEach
        void setup() {
            generator = JdbcObjectMother.java8StreamMethodGenerator(Java.java8());
        }

        @Test
        void shouldGenerateEagerMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamEagerApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamEager(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamEager");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                            final int columnCount = metaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.asUserType(state));
                            }
                            return list.stream();
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamEagerMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

        @Test
        void shouldGenerateLazyMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamLazyApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamLazy(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamLazy");
                      try {
                        final java.sql.Connection connection = dataSource.getConnection();
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        final java.sql.PreparedStatement statement = connection.prepareStatement(query);
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test);
                        }
                        for (final int jdbcIndex : index.get("id")) {
                          statement.setObject(jdbcIndex, id);
                        }
                        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                          final java.lang.String executedQuery = rawQuery
                            .replace(":test", test == null ? "null" : test.toString())
                            .replace(":id", java.lang.String.valueOf(id));
                          LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                        }
                        final java.sql.ResultSet resultSet = statement.executeQuery();
                        final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                        final int columnCount = metaData.getColumnCount();
                        final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                        return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<com.example.util.ResultRow>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final boolean tryAdvance(
                              final java.util.function.Consumer<? super com.example.util.ResultRow> action) {
                            try {
                              if (state.next()) {
                                action.accept(resultRow.asUserType(state));
                                return true;
                              }
                              return false;
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        }, false).onClose(new java.lang.Runnable() {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final void run() {
                            try {
                              resultSet.close();
                              statement.close();
                              connection.close();
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        });
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamLazyMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

    }

    @Nested
    @DisplayName("using java 9 configuration")
    class Java9 {

        private Java8StreamMethodGenerator generator;

        @BeforeEach
        void setup() {
            generator = JdbcObjectMother.java8StreamMethodGenerator(Java.java9());
        }

        @Test
        void shouldGenerateEagerMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamEagerApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamEager(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamEager");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                            final int columnCount = metaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.asUserType(state));
                            }
                            return list.stream();
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamEagerMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

        @Test
        void shouldGenerateLazyMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamLazyApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamLazy(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamLazy");
                      try {
                        final java.sql.Connection connection = dataSource.getConnection();
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        final java.sql.PreparedStatement statement = connection.prepareStatement(query);
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test);
                        }
                        for (final int jdbcIndex : index.get("id")) {
                          statement.setObject(jdbcIndex, id);
                        }
                        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                          final java.lang.String executedQuery = rawQuery
                            .replace(":test", test == null ? "null" : test.toString())
                            .replace(":id", java.lang.String.valueOf(id));
                          LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                        }
                        final java.sql.ResultSet resultSet = statement.executeQuery();
                        final java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
                        final int columnCount = metaData.getColumnCount();
                        final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                        return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<com.example.util.ResultRow>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final boolean tryAdvance(
                              final java.util.function.Consumer<? super com.example.util.ResultRow> action) {
                            try {
                              if (state.next()) {
                                action.accept(resultRow.asUserType(state));
                                return true;
                              }
                              return false;
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        }, false).onClose(new java.lang.Runnable() {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final void run() {
                            try {
                              resultSet.close();
                              statement.close();
                              connection.close();
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        });
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamLazyMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

    }

    @Nested
    @DisplayName("using java 11 configuration")
    class Java11 {

        private Java8StreamMethodGenerator generator;

        @BeforeEach
        void setup() {
            generator = JdbcObjectMother.java8StreamMethodGenerator(Java.java11());
        }

        @Test
        void shouldGenerateEagerMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamEagerApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamEager(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamEager");
                      try (final var connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final var resultSet = statement.executeQuery()) {
                            final var metaData = resultSet.getMetaData();
                            final var columnCount = metaData.getColumnCount();
                            final var state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                            final var list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.asUserType(state));
                            }
                            return list.stream();
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamEagerMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

        @Test
        void shouldGenerateLazyMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamLazyApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamLazy(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamLazy");
                      try {
                        final var connection = dataSource.getConnection();
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        final var statement = connection.prepareStatement(query);
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test);
                        }
                        for (final int jdbcIndex : index.get("id")) {
                          statement.setObject(jdbcIndex, id);
                        }
                        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                          final java.lang.String executedQuery = rawQuery
                            .replace(":test", test == null ? "null" : test.toString())
                            .replace(":id", java.lang.String.valueOf(id));
                          LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                        }
                        final var resultSet = statement.executeQuery();
                        final var metaData = resultSet.getMetaData();
                        final var columnCount = metaData.getColumnCount();
                        final var state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                        return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<com.example.util.ResultRow>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final boolean tryAdvance(
                              final java.util.function.Consumer<? super com.example.util.ResultRow> action) {
                            try {
                              if (state.next()) {
                                action.accept(resultRow.asUserType(state));
                                return true;
                              }
                              return false;
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        }, false).onClose(new java.lang.Runnable() {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final void run() {
                            try {
                              resultSet.close();
                              statement.close();
                              connection.close();
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        });
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamLazyMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

    }

    @Nested
    @DisplayName("using java 14 configuration")
    class Java14 {

        private Java8StreamMethodGenerator generator;

        @BeforeEach
        void setup() {
            generator = JdbcObjectMother.java8StreamMethodGenerator(Java.java14());
        }

        @Test
        void shouldGenerateEagerMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamEagerApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamEager(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamEager");
                      try (final var connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final var resultSet = statement.executeQuery()) {
                            final var metaData = resultSet.getMetaData();
                            final var columnCount = metaData.getColumnCount();
                            final var state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                            final var list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.asUserType(state));
                            }
                            return list.stream();
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamEagerMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

        @Test
        void shouldGenerateLazyMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamLazyApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamLazy(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamLazy");
                      try {
                        final var connection = dataSource.getConnection();
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        final var statement = connection.prepareStatement(query);
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test);
                        }
                        for (final int jdbcIndex : index.get("id")) {
                          statement.setObject(jdbcIndex, id);
                        }
                        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                          final java.lang.String executedQuery = rawQuery
                            .replace(":test", test == null ? "null" : test.toString())
                            .replace(":id", java.lang.String.valueOf(id));
                          LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                        }
                        final var resultSet = statement.executeQuery();
                        final var metaData = resultSet.getMetaData();
                        final var columnCount = metaData.getColumnCount();
                        final var state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                        return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<com.example.util.ResultRow>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final boolean tryAdvance(
                              final java.util.function.Consumer<? super com.example.util.ResultRow> action) {
                            try {
                              if (state.next()) {
                                action.accept(resultRow.asUserType(state));
                                return true;
                              }
                              return false;
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        }, false).onClose(new java.lang.Runnable() {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final void run() {
                            try {
                              resultSet.close();
                              statement.close();
                              connection.close();
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        });
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamLazyMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

    }

    @Nested
    @DisplayName("using java 16 configuration")
    class Java16 {

        private Java8StreamMethodGenerator generator;

        @BeforeEach
        void setup() {
            generator = JdbcObjectMother.java8StreamMethodGenerator(Java.java16());
        }

        @Test
        void shouldGenerateEagerMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamEagerApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamEager(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamEager");
                      try (final var connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final var resultSet = statement.executeQuery()) {
                            final var metaData = resultSet.getMetaData();
                            final var columnCount = metaData.getColumnCount();
                            final var state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                            final var list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.asUserType(state));
                            }
                            return list.stream();
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamEagerMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

        @Test
        void shouldGenerateLazyMethod() {
            Assertions.assertEquals("""
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateStreamLazyApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final java.util.stream.Stream<com.example.util.ResultRow> queryDataStreamLazy(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataStreamLazy");
                      try {
                        final var connection = dataSource.getConnection();
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        final var statement = connection.prepareStatement(query);
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test);
                        }
                        for (final int jdbcIndex : index.get("id")) {
                          statement.setObject(jdbcIndex, id);
                        }
                        if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                          final java.lang.String executedQuery = rawQuery
                            .replace(":test", test == null ? "null" : test.toString())
                            .replace(":id", java.lang.String.valueOf(id));
                          LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                        }
                        final var resultSet = statement.executeQuery();
                        final var metaData = resultSet.getMetaData();
                        final var columnCount = metaData.getColumnCount();
                        final var state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount);
                        return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<com.example.util.ResultRow>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final boolean tryAdvance(
                              final java.util.function.Consumer<? super com.example.util.ResultRow> action) {
                            try {
                              if (state.next()) {
                                action.accept(resultRow.asUserType(state));
                                return true;
                              }
                              return false;
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        }, false).onClose(new java.lang.Runnable() {
                          @java.lang.Override
                          @javax.annotation.processing.Generated(
                              value = "YoSQL",
                              comments = "DO NOT MODIFY - automatically generated by YoSQL"
                          )
                          public final void run() {
                            try {
                              resultSet.close();
                              statement.close();
                              connection.close();
                            }
                            catch (final java.sql.SQLException exception) {
                              throw new java.lang.RuntimeException(exception);
                            }
                          }
                        });
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """, generator.streamLazyMethod(Sql.sqlConfiguration(), Sql.sqlStatements()).toString());
        }

    }

}
