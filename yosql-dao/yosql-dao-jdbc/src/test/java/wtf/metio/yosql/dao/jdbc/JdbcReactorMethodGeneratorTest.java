/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at https://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.dao.jdbc;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import wtf.metio.yosql.codegen.api.ReactorMethodGenerator;
import wtf.metio.yosql.codegen.tck.ReactorMethodGeneratorTCK;
import wtf.metio.yosql.testing.configs.Java;

@DisplayName("JdbcReactorMethodGenerator")
class JdbcReactorMethodGeneratorTest {

    @Nested
    @DisplayName("using default configuration")
    class Defaults implements ReactorMethodGeneratorTCK {

        @Override
        public ReactorMethodGenerator generator() {
            return JdbcObjectMother.reactorMethodGenerator(Java.defaults());
        }

        @Override
        public String reactorReadMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateReactorApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final reactor.core.publisher.Flux<com.example.util.ResultRow> queryDataFlux(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataFlux");
                      try (final var connection = dataSource.getConnection()) {
                        final var query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final var rawQuery = QUERY_DATA_RAW;
                        final var index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final var executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final var resultSet = statement.executeQuery()) {
                            final var resultSetMetaData = resultSet.getMetaData();
                            final var columnCount = resultSetMetaData.getColumnCount();
                            final var state = new com.example.persistence.util.ResultState(resultSet, resultSetMetaData, columnCount);
                            final var list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.apply(state));
                            }
                            return reactor.core.publisher.Flux.fromIterable(list);
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using Java 4 configuration")
    class Java4 implements ReactorMethodGeneratorTCK {

        @Override
        public ReactorMethodGenerator generator() {
            return JdbcObjectMother.reactorMethodGenerator(Java.java4());
        }

        @Override
        public String reactorReadMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateReactorApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final reactor.core.publisher.Flux<com.example.util.ResultRow> queryDataFlux(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataFlux");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
                            final int columnCount = resultSetMetaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, resultSetMetaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.apply(state));
                            }
                            return reactor.core.publisher.Flux.fromIterable(list);
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using Java 5 configuration")
    class Java5 implements ReactorMethodGeneratorTCK {

        @Override
        public ReactorMethodGenerator generator() {
            return JdbcObjectMother.reactorMethodGenerator(Java.java5());
        }

        @Override
        public String reactorReadMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateReactorApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final reactor.core.publisher.Flux<com.example.util.ResultRow> queryDataFlux(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataFlux");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
                            final int columnCount = resultSetMetaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, resultSetMetaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.apply(state));
                            }
                            return reactor.core.publisher.Flux.fromIterable(list);
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using Java 7 configuration")
    class Java7 implements ReactorMethodGeneratorTCK {

        @Override
        public ReactorMethodGenerator generator() {
            return JdbcObjectMother.reactorMethodGenerator(Java.java7());
        }

        @Override
        public String reactorReadMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateReactorApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final reactor.core.publisher.Flux<com.example.util.ResultRow> queryDataFlux(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataFlux");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
                            final int columnCount = resultSetMetaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, resultSetMetaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.apply(state));
                            }
                            return reactor.core.publisher.Flux.fromIterable(list);
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using Java 8 configuration")
    class Java8 implements ReactorMethodGeneratorTCK {

        @Override
        public ReactorMethodGenerator generator() {
            return JdbcObjectMother.reactorMethodGenerator(Java.java8());
        }

        @Override
        public String reactorReadMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateReactorApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final reactor.core.publisher.Flux<com.example.util.ResultRow> queryDataFlux(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataFlux");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
                            final int columnCount = resultSetMetaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, resultSetMetaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.apply(state));
                            }
                            return reactor.core.publisher.Flux.fromIterable(list);
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using Java 9 configuration")
    class Java9 implements ReactorMethodGeneratorTCK {

        @Override
        public ReactorMethodGenerator generator() {
            return JdbcObjectMother.reactorMethodGenerator(Java.java9());
        }

        @Override
        public String reactorReadMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateReactorApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final reactor.core.publisher.Flux<com.example.util.ResultRow> queryDataFlux(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataFlux");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                            final java.sql.ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
                            final int columnCount = resultSetMetaData.getColumnCount();
                            final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, resultSetMetaData, columnCount);
                            final java.util.List<com.example.util.ResultRow> list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.apply(state));
                            }
                            return reactor.core.publisher.Flux.fromIterable(list);
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using Java 11 configuration")
    class Java11 implements ReactorMethodGeneratorTCK {

        @Override
        public ReactorMethodGenerator generator() {
            return JdbcObjectMother.reactorMethodGenerator(Java.java11());
        }

        @Override
        public String reactorReadMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateReactorApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final reactor.core.publisher.Flux<com.example.util.ResultRow> queryDataFlux(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataFlux");
                      try (final var connection = dataSource.getConnection()) {
                        final var query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final var rawQuery = QUERY_DATA_RAW;
                        final var index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final var executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final var resultSet = statement.executeQuery()) {
                            final var resultSetMetaData = resultSet.getMetaData();
                            final var columnCount = resultSetMetaData.getColumnCount();
                            final var state = new com.example.persistence.util.ResultState(resultSet, resultSetMetaData, columnCount);
                            final var list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.apply(state));
                            }
                            return reactor.core.publisher.Flux.fromIterable(list);
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using Java 14 configuration")
    class Java14 implements ReactorMethodGeneratorTCK {

        @Override
        public ReactorMethodGenerator generator() {
            return JdbcObjectMother.reactorMethodGenerator(Java.java14());
        }

        @Override
        public String reactorReadMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateReactorApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final reactor.core.publisher.Flux<com.example.util.ResultRow> queryDataFlux(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataFlux");
                      try (final var connection = dataSource.getConnection()) {
                        final var query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final var rawQuery = QUERY_DATA_RAW;
                        final var index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final var executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final var resultSet = statement.executeQuery()) {
                            final var resultSetMetaData = resultSet.getMetaData();
                            final var columnCount = resultSetMetaData.getColumnCount();
                            final var state = new com.example.persistence.util.ResultState(resultSet, resultSetMetaData, columnCount);
                            final var list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.apply(state));
                            }
                            return reactor.core.publisher.Flux.fromIterable(list);
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using Java 16 configuration")
    class Java16 implements ReactorMethodGeneratorTCK {

        @Override
        public ReactorMethodGenerator generator() {
            return JdbcObjectMother.reactorMethodGenerator(Java.java16());
        }

        @Override
        public String reactorReadMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateReactorApi</strong> to <strong>false</strong></p>
                     *
                     * @see com.example.util.ResultRow
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final reactor.core.publisher.Flux<com.example.util.ResultRow> queryDataFlux(
                        final java.lang.Object test, final int id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataFlux");
                      try (final var connection = dataSource.getConnection()) {
                        final var query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final var rawQuery = QUERY_DATA_RAW;
                        final var index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (final int jdbcIndex : index.get("test")) {
                            statement.setObject(jdbcIndex, test);
                          }
                          for (final int jdbcIndex : index.get("id")) {
                            statement.setObject(jdbcIndex, id);
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final var executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : test.toString())
                              .replace(":id", java.lang.String.valueOf(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          try (final var resultSet = statement.executeQuery()) {
                            final var resultSetMetaData = resultSet.getMetaData();
                            final var columnCount = resultSetMetaData.getColumnCount();
                            final var state = new com.example.persistence.util.ResultState(resultSet, resultSetMetaData, columnCount);
                            final var list = new java.util.ArrayList<com.example.util.ResultRow>();
                            while (state.next()) {
                              list.add(resultRow.apply(state));
                            }
                            return reactor.core.publisher.Flux.fromIterable(list);
                          }
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

}