/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at https://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.dao.jdbc;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import wtf.metio.yosql.codegen.api.BatchMethodGenerator;
import wtf.metio.yosql.codegen.tck.BatchMethodGeneratorTCK;
import wtf.metio.yosql.testing.configs.JavaConfigurations;

@DisplayName("JdbcBatchMethodGenerator")
class JdbcBatchMethodGeneratorTest {

    @Nested
    @DisplayName("using default configuration")
    class Defaults implements BatchMethodGeneratorTCK {

        @Override
        public BatchMethodGenerator generator() {
            return JdbcObjectMother.batchMethodGenerator(JavaConfigurations.defaults());
        }

        @Override
        public String batchWriteMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateBatchApi</strong> to <strong>false</strong></p>
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final int[] queryDataBatch(final java.lang.Object[] test, final int[] id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataBatch");
                      try (final var connection = dataSource.getConnection()) {
                        final var query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final var rawQuery = QUERY_DATA_RAW;
                        final var index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (int batch = 0; batch < test.length; batch++) {
                            for (final int jdbcIndex : index.get("test")) {
                              statement.setObject(jdbcIndex, test[batch]);
                            }
                            for (final int jdbcIndex : index.get("id")) {
                              statement.setObject(jdbcIndex, id[batch]);
                            }
                            statement.addBatch();
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final var executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : java.util.Arrays.toString(test))
                              .replace(":id", java.util.Arrays.toString(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          return statement.executeBatch();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using java 4 configuration")
    class Java4 implements BatchMethodGeneratorTCK {

        @Override
        public BatchMethodGenerator generator() {
            return JdbcObjectMother.batchMethodGenerator(JavaConfigurations.java4());
        }

        @Override
        public String batchWriteMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateBatchApi</strong> to <strong>false</strong></p>
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final int[] queryDataBatch(final java.lang.Object[] test, final int[] id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataBatch");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (int batch = 0; batch < test.length; batch++) {
                            for (final int jdbcIndex : index.get("test")) {
                              statement.setObject(jdbcIndex, test[batch]);
                            }
                            for (final int jdbcIndex : index.get("id")) {
                              statement.setObject(jdbcIndex, id[batch]);
                            }
                            statement.addBatch();
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : java.util.Arrays.toString(test))
                              .replace(":id", java.util.Arrays.toString(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          return statement.executeBatch();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using java 5 configuration")
    class Java5 implements BatchMethodGeneratorTCK {

        @Override
        public BatchMethodGenerator generator() {
            return JdbcObjectMother.batchMethodGenerator(JavaConfigurations.java5());
        }

        @Override
        public String batchWriteMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateBatchApi</strong> to <strong>false</strong></p>
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final int[] queryDataBatch(final java.lang.Object[] test, final int[] id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataBatch");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (int batch = 0; batch < test.length; batch++) {
                            for (final int jdbcIndex : index.get("test")) {
                              statement.setObject(jdbcIndex, test[batch]);
                            }
                            for (final int jdbcIndex : index.get("id")) {
                              statement.setObject(jdbcIndex, id[batch]);
                            }
                            statement.addBatch();
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : java.util.Arrays.toString(test))
                              .replace(":id", java.util.Arrays.toString(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          return statement.executeBatch();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using java 7 configuration")
    class Java7 implements BatchMethodGeneratorTCK {

        @Override
        public BatchMethodGenerator generator() {
            return JdbcObjectMother.batchMethodGenerator(JavaConfigurations.java7());
        }

        @Override
        public String batchWriteMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateBatchApi</strong> to <strong>false</strong></p>
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final int[] queryDataBatch(final java.lang.Object[] test, final int[] id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataBatch");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (int batch = 0; batch < test.length; batch++) {
                            for (final int jdbcIndex : index.get("test")) {
                              statement.setObject(jdbcIndex, test[batch]);
                            }
                            for (final int jdbcIndex : index.get("id")) {
                              statement.setObject(jdbcIndex, id[batch]);
                            }
                            statement.addBatch();
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : java.util.Arrays.toString(test))
                              .replace(":id", java.util.Arrays.toString(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          return statement.executeBatch();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using java 8 configuration")
    class Java8 implements BatchMethodGeneratorTCK {

        @Override
        public BatchMethodGenerator generator() {
            return JdbcObjectMother.batchMethodGenerator(JavaConfigurations.java8());
        }

        @Override
        public String batchWriteMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateBatchApi</strong> to <strong>false</strong></p>
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final int[] queryDataBatch(final java.lang.Object[] test, final int[] id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataBatch");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (int batch = 0; batch < test.length; batch++) {
                            for (final int jdbcIndex : index.get("test")) {
                              statement.setObject(jdbcIndex, test[batch]);
                            }
                            for (final int jdbcIndex : index.get("id")) {
                              statement.setObject(jdbcIndex, id[batch]);
                            }
                            statement.addBatch();
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : java.util.Arrays.toString(test))
                              .replace(":id", java.util.Arrays.toString(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          return statement.executeBatch();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using java 9 configuration")
    class Java9 implements BatchMethodGeneratorTCK {

        @Override
        public BatchMethodGenerator generator() {
            return JdbcObjectMother.batchMethodGenerator(JavaConfigurations.java9());
        }

        @Override
        public String batchWriteMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateBatchApi</strong> to <strong>false</strong></p>
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final int[] queryDataBatch(final java.lang.Object[] test, final int[] id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataBatch");
                      try (final java.sql.Connection connection = dataSource.getConnection()) {
                        final java.lang.String query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final java.lang.String rawQuery = QUERY_DATA_RAW;
                        final java.util.Map<java.lang.String, int[]> index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                          for (int batch = 0; batch < test.length; batch++) {
                            for (final int jdbcIndex : index.get("test")) {
                              statement.setObject(jdbcIndex, test[batch]);
                            }
                            for (final int jdbcIndex : index.get("id")) {
                              statement.setObject(jdbcIndex, id[batch]);
                            }
                            statement.addBatch();
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final java.lang.String executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : java.util.Arrays.toString(test))
                              .replace(":id", java.util.Arrays.toString(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          return statement.executeBatch();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using java 11 configuration")
    class Java11 implements BatchMethodGeneratorTCK {

        @Override
        public BatchMethodGenerator generator() {
            return JdbcObjectMother.batchMethodGenerator(JavaConfigurations.java11());
        }

        @Override
        public String batchWriteMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateBatchApi</strong> to <strong>false</strong></p>
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final int[] queryDataBatch(final java.lang.Object[] test, final int[] id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataBatch");
                      try (final var connection = dataSource.getConnection()) {
                        final var query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final var rawQuery = QUERY_DATA_RAW;
                        final var index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (int batch = 0; batch < test.length; batch++) {
                            for (final int jdbcIndex : index.get("test")) {
                              statement.setObject(jdbcIndex, test[batch]);
                            }
                            for (final int jdbcIndex : index.get("id")) {
                              statement.setObject(jdbcIndex, id[batch]);
                            }
                            statement.addBatch();
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final var executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : java.util.Arrays.toString(test))
                              .replace(":id", java.util.Arrays.toString(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          return statement.executeBatch();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using java 14 configuration")
    class Java14 implements BatchMethodGeneratorTCK {

        @Override
        public BatchMethodGenerator generator() {
            return JdbcObjectMother.batchMethodGenerator(JavaConfigurations.java14());
        }

        @Override
        public String batchWriteMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateBatchApi</strong> to <strong>false</strong></p>
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final int[] queryDataBatch(final java.lang.Object[] test, final int[] id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataBatch");
                      try (final var connection = dataSource.getConnection()) {
                        final var query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final var rawQuery = QUERY_DATA_RAW;
                        final var index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (int batch = 0; batch < test.length; batch++) {
                            for (final int jdbcIndex : index.get("test")) {
                              statement.setObject(jdbcIndex, test[batch]);
                            }
                            for (final int jdbcIndex : index.get("id")) {
                              statement.setObject(jdbcIndex, id[batch]);
                            }
                            statement.addBatch();
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final var executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : java.util.Arrays.toString(test))
                              .replace(":id", java.util.Arrays.toString(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          return statement.executeBatch();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

    @Nested
    @DisplayName("using java 16 configuration")
    class Java16 implements BatchMethodGeneratorTCK {

        @Override
        public BatchMethodGenerator generator() {
            return JdbcObjectMother.batchMethodGenerator(JavaConfigurations.java16());
        }

        @Override
        public String batchWriteMethodExpectation() {
            return """
                    /**
                     * <p>Executes the following statement:</p>
                     * <pre>
                     * SELECT raw FROM table WHERE test = ? AND id = ?;</pre>
                     *
                     * <p>Generated based on the following file(s):</p>
                     * <ul>
                     * <li>data/queryData.sql</li>
                     * </ul>
                     * <p>Disable generating this method by setting <strong>generateBatchApi</strong> to <strong>false</strong></p>
                     */
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final int[] queryDataBatch(final java.lang.Object[] test, final int[] id) {
                      LOG.entering("com.example.persistence.DataRepository", "queryDataBatch");
                      try (final var connection = dataSource.getConnection()) {
                        final var query = QUERY_DATA;
                        LOG.finer(() -> java.lang.String.format("Picked query [%s]", "QUERY_DATA"));
                        final var rawQuery = QUERY_DATA_RAW;
                        final var index = QUERY_DATA_INDEX;
                        LOG.finer(() -> java.lang.String.format("Picked index [%s]", "QUERY_DATA_INDEX"));
                        try (final var statement = connection.prepareStatement(query)) {
                          for (int batch = 0; batch < test.length; batch++) {
                            for (final int jdbcIndex : index.get("test")) {
                              statement.setObject(jdbcIndex, test[batch]);
                            }
                            for (final int jdbcIndex : index.get("id")) {
                              statement.setObject(jdbcIndex, id[batch]);
                            }
                            statement.addBatch();
                          }
                          if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                            final var executedQuery = rawQuery
                              .replace(":test", test == null ? "null" : java.util.Arrays.toString(test))
                              .replace(":id", java.util.Arrays.toString(id));
                            LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                          }
                          return statement.executeBatch();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                    """;
        }

    }

}
