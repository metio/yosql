/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at http://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.generator.dao.generic;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import wtf.metio.yosql.model.sql.SqlObjectMother;
import wtf.metio.yosql.test.ObjectMother;

@DisplayName("GenericMethodsGenerator")
class GenericMethodsGeneratorTest {

    private GenericMethodsGenerator generator;

    @BeforeEach
    void setUp() {
        generator = new GenericMethodsGenerator(
                ObjectMother.jdbcBatchMethods(),
                ObjectMother.jdbcStreamMethods(),
                ObjectMother.jdbcRxjavaMethods(),
                ObjectMother.jdbcStandardMethodGenerator(),
                ObjectMother.genericBlocks(),
                ObjectMother.methods(),
                ObjectMother.jdbcNames(),
                ObjectMother.jdbcParameters());
    }

    @Test
    void constructor() {
        Assertions.assertEquals("""
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public Constructor(final javax.sql.DataSource dataSource) {
                  this.dataSource = dataSource;
                }
                """, generator.constructor(SqlObjectMother.sqlStatements()).toString());
    }

    @Test
    void standardReadMethod() {
        Assertions.assertEquals("""
                /**
                 * <p>Executes the following statement:</p>
                 * <pre>
                 * SELECT raw FROM table;</pre>
                 * <p>Generated based on the following file(s):</p>
                 * <ul>
                 * <li>/some/path/query.sql</li>
                 * </ul>
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final java.util.List<java.lang.Object> queryTest(final java.lang.Object test) throws
                    java.sql.SQLException {
                  LOG.entering("Test", "queryTest");
                  try (final java.sql.Connection connection = dataSource.getConnection()) {
                    final java.lang.String query = QUERY_TEST;
                    LOG.finer(() -> String.format("Picked query [%s]", "QUERY_TEST"));
                    final java.lang.String rawQuery = QUERY_TEST_RAW;
                    final java.util.Map<java.lang.String, int[]> index = QUERY_TEST_INDEX;
                    LOG.finer(() -> String.format("Picked index [%s]", "QUERY_TEST_INDEX"));
                    try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                      for (final int jdbcIndex : index.get("test")) {
                        statement.setObject(jdbcIndex, test);
                      }
                      if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                        final java.lang.String executedQuery = rawQuery
                          .replace(":test", test == null ? "null" : test.toString());
                        LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                      }
                      try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                        final java.sql.ResultSetMetaData metaData = resultSet.getMetaData()final int columnCount = metaData.getColumnCount()final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount)final java.util.List<java.lang.Object> list = new java.util.ArrayList<>();
                        while (state.next()) {
                          list.add(defaultRowConverter.asUserType(state));
                        }
                        return list;
                      }
                    }
                  }
                }
                """, generator.standardReadMethod(SqlObjectMother.sqlConfiguration(), SqlObjectMother.sqlStatements()).toString());
    }

    @Test
    void standardWriteMethod() {
        Assertions.assertEquals("""
                /**
                 * <p>Executes the following statement:</p>
                 * <pre>
                 * SELECT raw FROM table;</pre>
                 * <p>Generated based on the following file(s):</p>
                 * <ul>
                 * <li>/some/path/query.sql</li>
                 * </ul>
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final int queryTest(final java.lang.Object test) throws java.sql.SQLException {
                  LOG.entering("Test", "queryTest");
                  try (final java.sql.Connection connection = dataSource.getConnection()) {
                    final java.lang.String query = QUERY_TEST;
                    LOG.finer(() -> String.format("Picked query [%s]", "QUERY_TEST"));
                    final java.lang.String rawQuery = QUERY_TEST_RAW;
                    final java.util.Map<java.lang.String, int[]> index = QUERY_TEST_INDEX;
                    LOG.finer(() -> String.format("Picked index [%s]", "QUERY_TEST_INDEX"));
                    try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                      for (final int jdbcIndex : index.get("test")) {
                        statement.setObject(jdbcIndex, test);
                      }
                      if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                        final java.lang.String executedQuery = rawQuery
                          .replace(":test", test == null ? "null" : test.toString());
                        LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                      }
                      return statement.executeUpdate();
                    }
                  }
                }
                """, generator.standardWriteMethod(SqlObjectMother.sqlConfiguration(), SqlObjectMother.sqlStatements()).toString());
    }

    @Test
    void standardCallMethod() {
        Assertions.assertEquals("""
                /**
                 * <p>Executes the following statement:</p>
                 * <pre>
                 * SELECT raw FROM table;</pre>
                 * <p>Generated based on the following file(s):</p>
                 * <ul>
                 * <li>/some/path/query.sql</li>
                 * </ul>
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final java.util.List<java.lang.Object> queryTest(final java.lang.Object test) throws
                    java.sql.SQLException {
                  LOG.entering("Test", "queryTest");
                  try (final java.sql.Connection connection = dataSource.getConnection()) {
                    final java.lang.String query = QUERY_TEST;
                    LOG.finer(() -> String.format("Picked query [%s]", "QUERY_TEST"));
                    final java.lang.String rawQuery = QUERY_TEST_RAW;
                    final java.util.Map<java.lang.String, int[]> index = QUERY_TEST_INDEX;
                    LOG.finer(() -> String.format("Picked index [%s]", "QUERY_TEST_INDEX"));
                    try (final java.sql.CallableStatement statement = connection.prepareCall(query)) {
                      for (final int jdbcIndex : index.get("test")) {
                        statement.setObject(jdbcIndex, test);
                      }
                      if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                        final java.lang.String executedQuery = rawQuery
                          .replace(":test", test == null ? "null" : test.toString());
                        LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                      }
                      try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                        final java.sql.ResultSetMetaData metaData = resultSet.getMetaData()final int columnCount = metaData.getColumnCount()final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount)final java.util.List<java.lang.Object> list = new java.util.ArrayList<>();
                        while (state.next()) {
                          list.add(defaultRowConverter.asUserType(state));
                        }
                        return list;
                      }
                    }
                  }
                }
                """, generator.standardCallMethod(SqlObjectMother.sqlConfiguration(), SqlObjectMother.sqlStatements()).toString());
    }

    @Test
    void batchWriteMethod() {
        Assertions.assertEquals("""
                /**
                 * <p>Executes the following statement:</p>
                 * <pre>
                 * SELECT raw FROM table;</pre>
                 * <p>Generated based on the following file(s):</p>
                 * <ul>
                 * <li>/some/path/query.sql</li>
                 * </ul>
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final int[] queryTest(final java.lang.Object[] test) throws java.sql.SQLException {
                  LOG.entering("Test", "queryTest");
                  try (final java.sql.Connection connection = dataSource.getConnection()) {
                    final java.lang.String query = QUERY_TEST;
                    LOG.finer(() -> String.format("Picked query [%s]", "QUERY_TEST"));
                    final java.lang.String rawQuery = QUERY_TEST_RAW;
                    final java.util.Map<java.lang.String, int[]> index = QUERY_TEST_INDEX;
                    LOG.finer(() -> String.format("Picked index [%s]", "QUERY_TEST_INDEX"));
                    try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                      for (int batch = 0; batch < test.length; batch++) {
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test[batch]);
                        }
                        statement.addBatch()}
                      if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                        final java.lang.String executedQuery = rawQuery
                          .replace(":test", test == null ? "null" : java.util.Arrays.toString(test));
                        LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                      }
                      return statement.executeBatch();
                    }
                  }
                }
                """, generator.batchWriteMethod(SqlObjectMother.sqlConfiguration(), SqlObjectMother.sqlStatements()).toString());
    }

    @Test
    void streamEagerReadMethod() {
        Assertions.assertEquals("""
                /**
                 * <p>Executes the following statement:</p>
                 * <pre>
                 * SELECT raw FROM table;</pre>
                 * <p>Generated based on the following file(s):</p>
                 * <ul>
                 * <li>/some/path/query.sql</li>
                 * </ul>
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final java.util.stream.Stream<java.lang.Object> queryTest(final java.lang.Object test) throws
                    java.sql.SQLException {
                  LOG.entering("Test", "queryTest");
                  try (final java.sql.Connection connection = dataSource.getConnection()) {
                    final java.lang.String query = QUERY_TEST;
                    LOG.finer(() -> String.format("Picked query [%s]", "QUERY_TEST"));
                    final java.lang.String rawQuery = QUERY_TEST_RAW;
                    final java.util.Map<java.lang.String, int[]> index = QUERY_TEST_INDEX;
                    LOG.finer(() -> String.format("Picked index [%s]", "QUERY_TEST_INDEX"));
                    try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                      for (final int jdbcIndex : index.get("test")) {
                        statement.setObject(jdbcIndex, test);
                      }
                      if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                        final java.lang.String executedQuery = rawQuery
                          .replace(":test", test == null ? "null" : test.toString());
                        LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                      }
                      try (final java.sql.ResultSet resultSet = statement.executeQuery()) {
                        final java.sql.ResultSetMetaData metaData = resultSet.getMetaData()final int columnCount = metaData.getColumnCount()final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount)final java.util.List<java.lang.Object> list = new java.util.ArrayList<>();
                        while (state.next()) {
                          list.add(defaultRowConverter.asUserType(state));
                        }
                        return list.stream();
                      }
                    }
                  }
                }
                """, generator.streamEagerReadMethod(SqlObjectMother.sqlConfiguration(), SqlObjectMother.sqlStatements()).toString());
    }

    @Test
    void streamLazyReadMethod() {
        Assertions.assertEquals("""
                /**
                 * <p>Executes the following statement:</p>
                 * <pre>
                 * SELECT raw FROM table;</pre>
                 * <p>Generated based on the following file(s):</p>
                 * <ul>
                 * <li>/some/path/query.sql</li>
                 * </ul>
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final java.util.stream.Stream<java.lang.Object> queryTest(final java.lang.Object test) throws
                    java.sql.SQLException {
                  LOG.entering("Test", "queryTest");
                  final java.sql.Connection connection = dataSource.getConnection()final java.lang.String query = QUERY_TEST;
                  LOG.finer(() -> String.format("Picked query [%s]", "QUERY_TEST"));
                  final java.lang.String rawQuery = QUERY_TEST_RAW;
                  final java.util.Map<java.lang.String, int[]> index = QUERY_TEST_INDEX;
                  LOG.finer(() -> String.format("Picked index [%s]", "QUERY_TEST_INDEX"));
                  final java.sql.PreparedStatement statement = connection.prepareStatement(query)for (final int jdbcIndex : index.get("test")) {
                    statement.setObject(jdbcIndex, test);
                  }
                  if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                    final java.lang.String executedQuery = rawQuery
                      .replace(":test", test == null ? "null" : test.toString());
                    LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                  }
                  final java.sql.ResultSet resultSet = statement.executeQuery()final java.sql.ResultSetMetaData metaData = resultSet.getMetaData()final int columnCount = metaData.getColumnCount()final com.example.persistence.util.ResultState state = new com.example.persistence.util.ResultState(resultSet, metaData, columnCount)return java.util.stream.StreamSupport.stream(new java.util.Spliterators.AbstractSpliterator<java.lang.Object>(java.lang.Long.MAX_VALUE, java.util.Spliterator.ORDERED) {
                    @java.lang.Override
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final boolean tryAdvance(
                        final java.util.function.Consumer<? super java.lang.Object> action) {
                      try {
                        if (state.next()) {
                          action.accept(defaultRowConverter.asUserType(state));
                          return true;
                        }
                        return false;
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                  }, false).onClose(new java.lang.Runnable() {
                    @java.lang.Override
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final void run() {
                      try {
                        resultSet.close();
                        statement.close();
                        connection.close();
                      }
                      catch (final java.sql.SQLException exception) {
                        throw new java.lang.RuntimeException(exception);
                      }
                    }
                  });
                }
                """, generator.streamLazyReadMethod(SqlObjectMother.sqlConfiguration(), SqlObjectMother.sqlStatements()).toString());
    }

    @Test
    void rxJavaReadMethod() {
        Assertions.assertEquals("""
                /**
                 * <p>Executes the following statement:</p>
                 * <pre>
                 * SELECT raw FROM table;</pre>
                 * <p>Generated based on the following file(s):</p>
                 * <ul>
                 * <li>/some/path/query.sql</li>
                 * </ul>
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final io.reactivex.Flowable<java.lang.Object> queryTest(final java.lang.Object test) {
                  LOG.entering("Test", "queryTest");
                  return io.reactivex.Flowable.generate(new java.util.concurrent.Callable<com.example.persistence.util.FlowState>() {
                    @java.lang.Override
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final com.example.persistence.util.FlowState call() throws java.lang.Exception {
                      final java.sql.Connection connection = dataSource.getConnection()final java.lang.String query = QUERY_TEST;
                      LOG.finer(() -> String.format("Picked query [%s]", "QUERY_TEST"));
                      final java.lang.String rawQuery = QUERY_TEST_RAW;
                      final java.util.Map<java.lang.String, int[]> index = QUERY_TEST_INDEX;
                      LOG.finer(() -> String.format("Picked index [%s]", "QUERY_TEST_INDEX"));
                      final java.sql.PreparedStatement statement = connection.prepareStatement(query)for (final int jdbcIndex : index.get("test")) {
                        statement.setObject(jdbcIndex, test);
                      }
                      if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                        final java.lang.String executedQuery = rawQuery
                          .replace(":test", test == null ? "null" : test.toString());
                        LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                      }
                      final java.sql.ResultSet resultSet = statement.executeQuery()final java.sql.ResultSetMetaData metaData = resultSet.getMetaData()final int columnCount = metaData.getColumnCount()return new com.example.persistence.util.FlowState(connection, statement, resultSet, metaData, columnCount);
                    }
                  }, new io.reactivex.functions.BiConsumer<com.example.persistence.util.FlowState, io.reactivex.Emitter<java.lang.Object>>() {
                    @java.lang.Override
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final void accept(final com.example.persistence.util.FlowState state,
                        final io.reactivex.Emitter<java.lang.Object> emitter) throws java.lang.Exception {
                      try {
                        if (state.next()) {
                          emitter.onNext(defaultRowConverter.asUserType(state));
                        } else {
                          emitter.onComplete();
                        }
                      }
                      catch (final java.sql.SQLException exception) {
                        emitter.onError(exception);
                      }
                    }
                  }, new io.reactivex.functions.Consumer<com.example.persistence.util.FlowState>() {
                    @java.lang.Override
                    @javax.annotation.processing.Generated(
                        value = "YoSQL",
                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                    )
                    public final void accept(final com.example.persistence.util.FlowState state) throws
                        java.lang.Exception {
                      state.close();
                    }
                  });
                }
                """, generator.rxJavaReadMethod(SqlObjectMother.sqlConfiguration(), SqlObjectMother.sqlStatements()).toString());
    }

}