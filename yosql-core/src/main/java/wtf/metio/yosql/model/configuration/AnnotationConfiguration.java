/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at http://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.model.configuration;

import org.immutables.value.Value;
import wtf.metio.yosql.model.options.AnnotationClassOptions;
import wtf.metio.yosql.model.options.AnnotationMemberOptions;

/**
 * Configures the annotation related options.
 */
@Value.Immutable
public interface AnnotationConfiguration {

    //region default values
    AnnotationClassOptions DEFAULT_CLASS_OPTION = AnnotationClassOptions.PROCESSING_API;
    String DEFAULT_CLASS_OPTION_STRING = "PROCESSING_API";
    AnnotationMemberOptions DEFAULT_MEMBER_OPTION = AnnotationMemberOptions.WITHOUT_DATE;
    String DEFAULT_MEMBER_OPTION_STRING = "WITHOUT_DATE";
    String DEFAULT_COMMENT = "DO NOT MODIFY - automatically generated by YoSQL";
    String DEFAULT_GENERATOR_NAME = "YoSQL";
    //endregion

    //region builders

    /**
     * @return A builder for custom annotation configurations.
     */
    static ImmutableAnnotationConfiguration.Builder builder() {
        return ImmutableAnnotationConfiguration.builder();
    }

    /**
     * @return An annotation configuration using default values.
     */
    static ImmutableAnnotationConfiguration usingDefaults() {
        return builder().build();
    }

    //endregion

    /**
     * @return The annotation API to use for classes.
     */
    @Value.Default
    default AnnotationClassOptions classAnnotation() {
        return DEFAULT_CLASS_OPTION;
    }

    /**
     * @return The annotation API to use for fields.
     */
    @Value.Default
    default AnnotationClassOptions fieldAnnotation() {
        return DEFAULT_CLASS_OPTION;
    }

    /**
     * @return The annotation API to use for methods.
     */
    @Value.Default
    default AnnotationClassOptions methodAnnotation() {
        return DEFAULT_CLASS_OPTION;
    }

    /**
     * @return The annotation members to use for classes.
     */
    @Value.Default
    default AnnotationMemberOptions classMembers() {
        return DEFAULT_MEMBER_OPTION;
    }

    /**
     * @return The annotation members to use for fields.
     */
    @Value.Default
    default AnnotationMemberOptions fieldMembers() {
        return DEFAULT_MEMBER_OPTION;
    }

    /**
     * @return The annotation members to use for methods.
     */
    @Value.Default
    default AnnotationMemberOptions methodMembers() {
        return DEFAULT_MEMBER_OPTION;
    }

    /**
     * @return The comment used for classes.
     */
    @Value.Default
    default String classComment() {
        return DEFAULT_COMMENT;
    }

    /**
     * @return The comment used for fields.
     */
    @Value.Default
    default String fieldComment() {
        return DEFAULT_COMMENT;
    }

    /**
     * @return The comment used for methods.
     */
    @Value.Default
    default String methodComment() {
        return DEFAULT_COMMENT;
    }

    /**
     * @return The name of the code generator.
     */
    @Value.Default
    default String generatorName() {
        return DEFAULT_GENERATOR_NAME;
    }

}
