/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at http://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.tooling.gradle;

import org.gradle.api.provider.Property;
import org.gradle.api.tasks.Input;
import wtf.metio.yosql.models.constants.configuration.AnnotationMembers;
import wtf.metio.yosql.models.immutables.AnnotationsConfiguration;

/**
 * Configures how annotations are applied to the generated code.
 */
public abstract class Annotations {

    /**
     * @return Controls whether {@link javax.annotation.processing.Generated} annotations should be added to the generated classes.
     */
    @Input
    public abstract Property<Boolean> getAnnotateClasses();

    /**
     * @return Controls whether {@link javax.annotation.processing.Generated} annotations should be added to the generated fields.
     */
    @Input
    public abstract Property<Boolean> getAnnotateFields();

    /**
     * @return Controls whether {@link javax.annotation.processing.Generated} annotations should be added to the generated methods.
     */
    @Input
    public abstract Property<Boolean> getAnnotateMethods();

    /**
     * @return The annotation members to use for classes.
     */
    @Input
    public abstract Property<AnnotationMembers> getClassMembers();

    /**
     * @return The annotation members to use for fields.
     */
    @Input
    public abstract Property<AnnotationMembers> getFieldMembers();

    /**
     * @return The annotation members to use for methods.
     */
    @Input
    public abstract Property<AnnotationMembers> getMethodMembers();

    /**
     * @return Sets the comment used for annotated classes.
     */
    @Input
    public abstract Property<String> getClassComment();

    /**
     * @return Sets the comment used for annotated fields.
     */
    @Input
    public abstract Property<String> getFieldComment();

    /**
     * @return Sets the comment used for annotated methods.
     */
    @Input
    public abstract Property<String> getMethodComment();

    /**
     * @return The name of the code generator
     */
    @Input
    public abstract Property<String> getGeneratorName();

    AnnotationsConfiguration asConfiguration() {
        return AnnotationsConfiguration.usingDefaults()
                .setAnnotateClasses(getAnnotateClasses().get())
                .setAnnotateFields(getAnnotateFields().get())
                .setAnnotateMethods(getAnnotateMethods().get())
                .setClassComment(getClassComment().get())
                .setFieldComment(getClassComment().get())
                .setMethodComment(getMethodComment().get())
                .setGeneratorName(getGeneratorName().get())
                .build();
    }

    void configureConventions() {
        getAnnotateClasses().convention(false);
        getAnnotateFields().convention(false);
        getAnnotateMethods().convention(false);
        getClassMembers().convention(AnnotationMembers.WITHOUT_DATE);
        getFieldMembers().convention(AnnotationMembers.WITHOUT_DATE);
        getMethodMembers().convention(AnnotationMembers.WITHOUT_DATE);
        getClassComment().convention("DO NOT MODIFY - automatically generated by YoSQL");
        getFieldComment().convention("DO NOT MODIFY - automatically generated by YoSQL");
        getMethodComment().convention("DO NOT MODIFY - automatically generated by YoSQL");
        getGeneratorName().convention("YoSQL");
    }

}
