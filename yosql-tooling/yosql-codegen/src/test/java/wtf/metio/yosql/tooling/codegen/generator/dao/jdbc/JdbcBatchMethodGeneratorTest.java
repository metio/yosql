/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at http://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.tooling.codegen.generator.dao.jdbc;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import wtf.metio.yosql.tooling.codegen.test.ObjectMother;

@DisplayName("JdbcBatchMethodGenerator")
class JdbcBatchMethodGeneratorTest {

    private JdbcBatchMethodGenerator generator;

    @BeforeEach
    void setUp() {
        generator = new JdbcBatchMethodGenerator(
                ObjectMother.controlFlows(),
                ObjectMother.methods(),
                ObjectMother.parameters(),
                ObjectMother.loggingGenerator(),
                ObjectMother.jdbcBlocks(),
                ObjectMother.jdbcTransformer());
    }

    @Test
    void shouldGenerateBatchWriteMethod() {
        Assertions.assertEquals("""
                /**
                 * <p>Executes the following statement:</p>
                 * <pre>
                 * SELECT raw FROM table;</pre>
                 * <p>Generated based on the following file(s):</p>
                 * <ul>
                 * <li>/some/path/query.sql</li>
                 * </ul>
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final int[] queryTest(final java.lang.Object[] test) throws java.sql.SQLException {
                  LOG.entering("Test", "queryTest");
                  try (final java.sql.Connection connection = dataSource.getConnection()) {
                    final java.lang.String query = QUERY_TEST;
                    LOG.finer(() -> String.format("Picked query [%s]", "QUERY_TEST"));
                    final java.lang.String rawQuery = QUERY_TEST_RAW;
                    final java.util.Map<java.lang.String, int[]> index = QUERY_TEST_INDEX;
                    LOG.finer(() -> String.format("Picked index [%s]", "QUERY_TEST_INDEX"));
                    try (final java.sql.PreparedStatement statement = connection.prepareStatement(query)) {
                      for (int batch = 0; batch < test.length; batch++) {
                        for (final int jdbcIndex : index.get("test")) {
                          statement.setObject(jdbcIndex, test[batch]);
                        }
                        statement.addBatch()}
                      if (LOG.isLoggable(java.util.logging.Level.FINE)) {
                        final java.lang.String executedQuery = rawQuery
                          .replace(":test", test == null ? "null" : java.util.Arrays.toString(test));
                        LOG.fine(() -> java.lang.String.format("Executing query [%s]", executedQuery));
                      }
                      return statement.executeBatch();
                    }
                  }
                }
                """, generator.batchWriteMethod(ObjectMother.sqlConfiguration(), ObjectMother.sqlStatements()).toString());
    }

}