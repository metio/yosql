/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at http://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.tooling.codegen.generator.blocks.generic;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import wtf.metio.yosql.tooling.codegen.model.configuration.AnnotationConfiguration;

import static wtf.metio.yosql.tooling.codegen.model.options.AnnotationClassOptions.ANNOTATION_API;
import static wtf.metio.yosql.tooling.codegen.model.options.AnnotationClassOptions.PROCESSING_API;
import static wtf.metio.yosql.tooling.codegen.model.options.AnnotationMemberOptions.ALL;

@DisplayName("DefaultAnnotationGenerator")
class DefaultAnnotationGeneratorTest {

    @Nested
    @DisplayName("Default Configuration")
    class DefaultConfig {

        @Test
        @DisplayName("can annotate classes")
        void shouldAnnotateClasses() {
            // given
            final var generator = new DefaultAnnotationGenerator(AnnotationConfiguration.usingDefaults());

            // when
            final var annotations = generator.generatedClass();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.processing.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

        @Test
        @DisplayName("can annotate fields")
        void shouldAnnotateFields() {
            // given
            final var generator = new DefaultAnnotationGenerator(AnnotationConfiguration.usingDefaults());

            // when
            final var annotations = generator.generatedField();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.processing.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

        @Test
        @DisplayName("can annotate methods")
        void shouldAnnotateMethods() {
            // given
            final var generator = new DefaultAnnotationGenerator(AnnotationConfiguration.usingDefaults());

            // when
            final var annotations = generator.generatedMethod();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.processing.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

    }

    @Nested
    @DisplayName("Custom Configuration")
    class CustomConfig {

        @Test
        @DisplayName("can add date to generated annotation")
        void shouldWriteDate() {
            // given
            final var config = AnnotationConfiguration.usingDefaults()
                    .withMethodMembers(ALL);
            final var generator = new DefaultAnnotationGenerator(config);

            // when
            final var annotations = generator.generatedMethod();

            // then
            annotations.forEach(annotation -> Assertions.assertTrue(annotation.toString().contains("date")));
        }

        @Test
        @DisplayName("can use javax.annotation.processing.Generated")
        void shouldUseProcessingApi() {
            // given
            final var config = AnnotationConfiguration.usingDefaults()
                    .withClassAnnotation(PROCESSING_API);
            final var generator = new DefaultAnnotationGenerator(config);

            // when
            final var annotations = generator.generatedClass();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.processing.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

        @Test
        @DisplayName("can use javax.annotation.Generated")
        void shouldUseAnnotationApi() {
            // given
            final var config = AnnotationConfiguration.usingDefaults()
                    .withClassAnnotation(ANNOTATION_API);
            final var generator = new DefaultAnnotationGenerator(config);

            // when
            final var annotations = generator.generatedClass();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

    }

}