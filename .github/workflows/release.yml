name: Automated Release
on:
  schedule:
    - cron: 25 3 * * WED
  workflow_dispatch:
env:
  JAVA_VERSION: 17
  JAVA_PACKAGE: jdk
  JAVA_ARCH: x64
  JAVA_DISTRO: temurin
jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      commit_count: ${{ steps.commits.outputs.count }}
      release_version: ${{ steps.release.outputs.version }}
      previous_version: ${{ steps.previous.outputs.version }}
    steps:
      - id: checkout
        name: Clone Git Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: commits
        name: Count Commits
        run: echo "::set-output name=count::$(git rev-list --count HEAD --since='last Wednesday' -- yosql-codegen yosql-internals yosql-models yosql-tooling)"
      - id: release
        name: Create Release Version
        if: steps.commits.outputs.count > 0
        run: echo "::set-output name=version::$(date +'%Y.%-m.%-d')"
      - id: previous
        name: Get Last Release
        if: steps.commits.outputs.count > 0
        run: echo "::set-output name=version::$(git describe --abbrev=0 --tags)"
  maven:
    name: Build Maven Tooling
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Clone Git Repository
        uses: actions/checkout@v3
        if: needs.prepare.outputs.commit_count > 0
      - id: java
        name: Setup Java
        uses: actions/setup-java@v3
        if: needs.prepare.outputs.commit_count > 0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: ${{ env.JAVA_PACKAGE }}
          architecture: ${{ env.JAVA_ARCH }}
          distribution: ${{ env.JAVA_DISTRO }}
          server-id: ossrh
          server-username: MAVEN_CENTRAL_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
      - id: cache
        name: Cache Maven Repository
        uses: actions/cache@v3
        if: needs.prepare.outputs.commit_count > 0
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - id: gpg
        name: GPG Key
        if: needs.prepare.outputs.commit_count > 0
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: signing.key.asc
          fileDir: ${{ github.workspace}}
          encodedString: ${{ secrets.GPG_SECRET_KEY_BASE64 }}
      - name: Set release version
        run: mvn --batch-mode versions:set --define newVersion=${{ needs.prepare.outputs.release_version }} --define generateBackupPoms=false
        if: needs.prepare.outputs.commit_count > 0
      - id: deploy-maven-tooling
        name: Deploy Maven Tooling
        run: MAVEN_OPTS="--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED" mvn --batch-mode --activate-profiles release --projects yosql-tooling/yosql-tooling-maven --also-make install deploy --define pgp.secretkey=keyfile:signing.key.asc --define pgp.passphrase=literal:${{ secrets.GPG_SECRET_KEY_PASSWORD }}
        if: needs.prepare.outputs.commit_count > 0
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
  gradle:
    name: Build Gradle Tooling
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Clone Git Repository
        uses: actions/checkout@v3
        if: needs.prepare.outputs.commit_count > 0
      - id: java
        name: Setup Java
        uses: actions/setup-java@v3
        if: needs.prepare.outputs.commit_count > 0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: ${{ env.JAVA_PACKAGE }}
          architecture: ${{ env.JAVA_ARCH }}
          distribution: ${{ env.JAVA_DISTRO }}
      - id: cache
        name: Cache Maven Repository
        uses: actions/cache@v3
        if: needs.prepare.outputs.commit_count > 0
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set release version
        run: mvn --batch-mode versions:set --define newVersion=${{ needs.prepare.outputs.release_version }} --define generateBackupPoms=false
        if: needs.prepare.outputs.commit_count > 0
      - id: install-maven-tooling
        name: Install Maven Tooling
        run: mvn --batch-mode install
        if: needs.prepare.outputs.commit_count > 0
      - id: build-gradle
        name: Build Gradle Tooling
        run: cd ./yosql-examples/yosql-examples-gradle/ && ./gradlew build -Pversion=${{ needs.prepare.outputs.release_version }}
        if: needs.prepare.outputs.commit_count > 0
      - id: deploy-gradle
        name: Deploy Gradle Tooling
        run: cd ./yosql-tooling/yosql-tooling-gradle/ && ./gradlew publishPlugins -Pversion=${{ needs.prepare.outputs.release_version }} -Pgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }} -Pgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }}
        if: needs.prepare.outputs.commit_count > 0
  ant:
    name: Build Ant Tooling
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Clone Git Repository
        uses: actions/checkout@v3
        if: needs.prepare.outputs.commit_count > 0
      - id: java
        name: Setup Java
        uses: actions/setup-java@v3
        if: needs.prepare.outputs.commit_count > 0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: ${{ env.JAVA_PACKAGE }}
          architecture: ${{ env.JAVA_ARCH }}
          distribution: ${{ env.JAVA_DISTRO }}
      - id: cache
        name: Cache Maven Repository
        uses: actions/cache@v3
        if: needs.prepare.outputs.commit_count > 0
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - id: gpg
        name: GPG Key
        if: needs.prepare.outputs.commit_count > 0
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: signing.key.asc
          fileDir: ${{ github.workspace}}
          encodedString: ${{ secrets.GPG_SECRET_KEY_BASE64 }}
      - name: Set release version
        run: mvn --batch-mode versions:set --define newVersion=${{ needs.prepare.outputs.release_version }} --define generateBackupPoms=false
        if: needs.prepare.outputs.commit_count > 0
      - id: build-ant-tooling
        name: Build Ant Tooling
        run: mvn --batch-mode --activate-profiles release --projects yosql-tooling/yosql-tooling-ant --also-make install --define pgp.secretkey=keyfile:signing.key.asc --define pgp.passphrase=literal:${{ secrets.GPG_SECRET_KEY_PASSWORD }}
        if: needs.prepare.outputs.commit_count > 0
      - id: upload-ant-tooling
        name: Upload Ant Tooling Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ant
          path: ./yosql-tooling/yosql-tooling-ant/target/yosql-tooling-ant-*-jvm*
  cli:
    name: Build CLI Tooling on ${{ matrix.os }}
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
    #          - macos-latest
    #          - windows-latest
    steps:
      - id: checkout
        name: Clone Git Repository
        uses: actions/checkout@v3
        if: needs.prepare.outputs.commit_count > 0
      - id: java
        name: Setup Java
        uses: actions/setup-java@v3
        if: needs.prepare.outputs.commit_count > 0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: ${{ env.JAVA_PACKAGE }}
          architecture: ${{ env.JAVA_ARCH }}
          distribution: ${{ env.JAVA_DISTRO }}
      - id: cache
        name: Cache Maven Repository
        uses: actions/cache@v3
        if: needs.prepare.outputs.commit_count > 0
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - id: gpg
        name: GPG Key
        if: needs.prepare.outputs.commit_count > 0
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: signing.key.asc
          fileDir: ${{ github.workspace}}
          encodedString: ${{ secrets.GPG_SECRET_KEY_BASE64 }}
      - name: Set release version
        run: mvn --batch-mode versions:set --define newVersion=${{ needs.prepare.outputs.release_version }} --define generateBackupPoms=false
        if: needs.prepare.outputs.commit_count > 0
      - id: build-cli-tooling
        name: Build CLI Tooling
        run: mvn --batch-mode --activate-profiles release --projects yosql-tooling/yosql-tooling-cli --also-make install --define pgp.secretkey=keyfile:signing.key.asc --define pgp.passphrase=literal:${{ secrets.GPG_SECRET_KEY_PASSWORD }}
        if: needs.prepare.outputs.commit_count > 0
      - id: upload-cli-tooling
        name: Upload CLI Tooling Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cli
          path: ./yosql-tooling/yosql-tooling-cli/target/yosql-tooling-cli-*-jvm*
        if: runner.os == 'Linux'
  release:
    name: GitHub Release
    needs: [prepare, maven, gradle, ant, cli]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - id: checkout
        name: Clone Git Repository
        if: needs.prepare.outputs.commit_count > 0
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: download
        name: Download Artifacts
        if: needs.prepare.outputs.commit_count > 0
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - id: create_release
        name: Create Release
        if: needs.prepare.outputs.commit_count > 0
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.release_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/ant/yosql-tooling-ant-${{ needs.prepare.outputs.release_version }}-jvm.zip
            artifacts/ant/yosql-tooling-ant-${{ needs.prepare.outputs.release_version }}-jvm.zip.asc
            artifacts/ant/yosql-tooling-ant-${{ needs.prepare.outputs.release_version }}-jvm.zip.sha512
            artifacts/cli/yosql-tooling-cli-${{ needs.prepare.outputs.release_version }}-jvm.zip
            artifacts/cli/yosql-tooling-cli-${{ needs.prepare.outputs.release_version }}-jvm.zip.asc
            artifacts/cli/yosql-tooling-cli-${{ needs.prepare.outputs.release_version }}-jvm.zip.sha512



