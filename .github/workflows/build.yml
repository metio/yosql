name: Build Project
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  JAVA_VERSION: 16
  JAVA_PACKAGE: jdk
  JAVA_ARCH: x64
  JAVA_DISTRO: adopt
  PROJECT_URL: yosql.projects.metio.wtf
jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Clone Git Repository
        uses: actions/checkout@v2
      - id: java
        name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: ${{ env.JAVA_PACKAGE }}
          architecture: ${{ env.JAVA_ARCH }}
          distribution: ${{ env.JAVA_DISTRO }}
      - id: cache
        name: Cache Maven Repository
        uses: actions/cache@v2.1.5
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - id: maven
        name: Maven Artifacts
        run: mvn --batch-mode install
      - id: gradle-plugin
        name: Gradle Plugin
        run: cd ./yosql-tooling/yosql-tooling-gradle/ && ./gradlew build
  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        benchmark: ["codegen", "jdbc"]
    steps:
      - id: checkout
        name: Clone Git Repository
        uses: actions/checkout@v2
      - id: java
        name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: ${{ env.JAVA_PACKAGE }}
          architecture: ${{ env.JAVA_ARCH }}
          distribution: ${{ env.JAVA_DISTRO }}
      - id: cache
        name: Cache Maven Repository
        uses: actions/cache@v2.1.5
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - id: run-benchmark
        name: Run Benchmark [${{ matrix.benchmark }}]
        run: mvn --batch-mode --projects yosql-benchmarks/yosql-benchmarks-${{ matrix.benchmark }} --also-make --activate-profiles benchmarks verify -Dorg.slf4j.simpleLogger.log.yosql=warn -DskipTests 2>&1 1> build.log
      - id: upload-benchmark
        name: Upload Benchmark Results
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-${{ matrix.benchmark }}
          path: ./yosql-benchmarks/yosql-benchmarks-${{ matrix.benchmark }}/target/benchmark/yosql-benchmarks-${{ matrix.benchmark }}.json
  website:
    name: Website
    runs-on: ubuntu-latest
    needs: [benchmarks]
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - id: checkout
        name: Clone Git Repository
        uses: actions/checkout@v2
      - id: hugo
        name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: latest
      - id: download
        name: Download Benchmarks Results
        uses: actions/download-artifact@v2
      - id: copy-codegen-results
        name: Copy Codegen Results
        run: cp ./benchmark-codegen/yosql-benchmarks-codegen.json ./yosql-website/content/benchmarks/current/yosql-benchmarks-codegen.json
      - id: copy-jdbc-results
        name: Copy JDBC Results
        run: cp ./benchmark-jdbc/yosql-benchmarks-jdbc.json ./yosql-website/content/benchmarks/current/yosql-benchmarks-jdbc.json
      - id: previous
        name: Get Last Release
        run: echo "::set-output name=version::$(git describe --abbrev=0 --tags)"
      - id: website
        name: Build Website
        run: hugo --minify --i18n-warnings --path-warnings --source yosql-website
        env:
          YOSQL_RELEASE: ${{ steps.previous.outputs.version }}
      - id: deploy
        name: Deploy Website
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./yosql-website/public
          force_orphan: true
          cname: ${{ env.PROJECT_URL }}
