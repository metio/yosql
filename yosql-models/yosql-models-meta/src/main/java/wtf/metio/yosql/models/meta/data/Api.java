/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at http://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.models.meta.data;

import com.squareup.javapoet.TypeName;
import wtf.metio.yosql.models.constants.api.AnnotationApis;
import wtf.metio.yosql.models.constants.api.LoggingApis;
import wtf.metio.yosql.models.constants.api.PersistenceApis;
import wtf.metio.yosql.models.meta.ConfigurationExample;
import wtf.metio.yosql.models.meta.ConfigurationGroup;
import wtf.metio.yosql.models.meta.ConfigurationSetting;

public final class Api {

    public static ConfigurationGroup configurationGroup() {
        return ConfigurationGroup.builder()
                .setName(Api.class.getSimpleName())
                .setDescription("Configures which external APIs should be used.")
                .addSettings(daoApi())
                .addSettings(loggingApi())
                .addSettings(annotationApi())
                .build();
    }

    private static ConfigurationSetting daoApi() {
        return ConfigurationSetting.builder()
                .setName("daoApi")
                .setDescription("The DAO API to use (default: <strong>JDBC</strong>).")
                .setType(TypeName.get(PersistenceApis.class))
                .setValue(PersistenceApis.JDBC)
                .build();
    }

    private static ConfigurationSetting loggingApi() {
        return ConfigurationSetting.builder()
                .setName("loggingApi")
                .setDescription("The logging API to use (default: <strong>NONE</strong>).")
                .setType(TypeName.get(LoggingApis.class))
                .setValue(LoggingApis.NONE)
                .build();
    }

    private static ConfigurationSetting annotationApi() {
        return ConfigurationSetting.builder()
                .setName("annotationApi")
                .setDescription("The annotation API to use (default: <strong>PROCESSING_API</strong>).")
                .setType(TypeName.get(AnnotationApis.class))
                .setValue(AnnotationApis.PROCESSING_API)
                .addExamples(ConfigurationExample.builder()
                        .setValue("PROCESSING_API")
                        .setDescription("The default value of the `annotationApi` configuration option is `PROCESSING_API`. Setting the option to `PROCESSING_API` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.processing.Generated;

                                @Generated(
                                    value = "YoSQL",
                                    date = "<current_timestamp>",
                                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                        // ... some code
                                    }

                                    // ... rest of generated code

                                }
                                """)
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue("ANNOTATION_API")
                        .setDescription("Changing the `annotationApi` configuration option to `ANNOTATION_API` uses the annotation API instead.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.Generated;

                                @Generated(
                                    value = "YoSQL",
                                    date = "<current_timestamp>",
                                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {

                                    @Generated(
                                          value = "YoSQL",
                                          date = "<current_timestamp>",
                                          comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                      // ... some code
                                    }

                                    // ... rest of generated code (same as above)

                                }
                                """)
                        .build())
                .build();
    }

    private Api() {
        // data class
    }

}
