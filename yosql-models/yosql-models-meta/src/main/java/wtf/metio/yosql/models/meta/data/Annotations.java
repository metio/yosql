/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at https://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.models.meta.data;

import com.squareup.javapoet.*;
import wtf.metio.yosql.internals.javapoet.TypicalTypes;
import wtf.metio.yosql.models.configuration.Annotation;
import wtf.metio.yosql.models.configuration.AnnotationMember;
import wtf.metio.yosql.models.configuration.GeneratedAnnotationApis;
import wtf.metio.yosql.models.configuration.GeneratedAnnotationMembers;
import wtf.metio.yosql.models.meta.ConfigurationExample;
import wtf.metio.yosql.models.meta.ConfigurationGroup;
import wtf.metio.yosql.models.meta.ConfigurationSetting;

import javax.lang.model.element.Modifier;
import java.util.ArrayList;
import java.util.Collection;
import java.util.stream.Stream;

import static wtf.metio.yosql.internals.javapoet.TypicalTypes.gradleContainerOf;
import static wtf.metio.yosql.internals.jdk.Strings.upperCase;

public final class Annotations extends AbstractConfigurationGroup {

    private static final String GROUP_NAME = Annotations.class.getSimpleName();
    private static final String DEFAULT_COMMENT = "DO NOT MODIFY - automatically generated by YoSQL";
    private static final GeneratedAnnotationMembers DEFAULT_MEMBERS = GeneratedAnnotationMembers.WITHOUT_DATE;
    private static final String ANNOTATION_SPEC = "AnnotationSpec";
    private static final ClassName ANT_ANNOTATION_TYPE = antType(ANNOTATION_SPEC);
    private static final ClassName GRADLE_ANNOTATION_TYPE = gradleType(ANNOTATION_SPEC);
    private static final ClassName MAVEN_ANNOTATION_TYPE = mavenType(ANNOTATION_SPEC);
    private static final String ANNOTATION_MEMBER_SPEC = "AnnotationMemberSpec";
    private static final ClassName ANT_MEMBER_TYPE = antType(ANNOTATION_MEMBER_SPEC);
    private static final ClassName GRADLE_MEMBER_TYPE = gradleType(ANNOTATION_MEMBER_SPEC);
    private static final ClassName MAVEN_MEMBER_TYPE = mavenType(ANNOTATION_MEMBER_SPEC);
    private static final String AS_ANNOTATION = "asAnnotation";
    private static final String AS_ANNOTATION_MEMBER = "asAnnotationMember";
    private static final String TYPE = "type";
    private static final String MEMBERS = "members";
    private static final String KEY = "key";
    private static final String VALUE = "value";
    private static final String CREATE_ANNOTATIONS = "createAnnotations";

    public static ConfigurationGroup configurationGroup() {
        return ConfigurationGroup.builder()
                .setName(GROUP_NAME)
                .setDescription("Configures how annotations are applied to the generated code.")
                .addSettings(annotationApi())
                .addSettings(annotateClasses())
                .addSettings(annotateFields())
                .addSettings(annotateMethods())
                .addSettings(classMembers())
                .addSettings(fieldMembers())
                .addSettings(methodMembers())
                .addSettings(classComment())
                .addSettings(fieldComment())
                .addSettings(methodComment())
                .addSettings(generatorName())
                .addSettings(repositoryAnnotations())
                .addSettings(constructorAnnotations())
                .addSettings(methodAnnotations())
                .addAntTypes(antAnnotationSpecType())
                .addAntTypes(antAnnotationMemberSpecType())
                .addAntMethods(createAntAnnotations())
                .addCliMethods(createCliAnnotations())
                .addGradleTypes(gradleAnnotationSpecType())
                .addGradleTypes(gradleAnnotationMemberSpecType())
                .addImmutableMethods(immutableBuilder(GROUP_NAME))
                .addImmutableMethods(immutableCopyOf(GROUP_NAME))
                .addImmutableAnnotations(immutableAnnotation())
                .addMavenTypes(mavenAnnotationSpecType())
                .addMavenTypes(mavenAnnotationMemberSpecType())
                .addMavenMethods(createMavenAnnotations())
                .build();
    }

    private static ConfigurationSetting annotationApi() {
        final var name = "annotationApi";
        final var description = "The annotation API to use.";
        final var value = GeneratedAnnotationApis.PROCESSING_API;
        final var type = TypeName.get(GeneratedAnnotationApis.class);
        return enumSetting(GROUP_NAME, name, description, value, type)
                .addExamples(ConfigurationExample.builder()
                        .setValue(value.name())
                        .setDescription("The default value of the `annotationApi` configuration option is `PROCESSING_API`. Setting the option to `PROCESSING_API` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.processing.Generated;

                                @Generated(
                                    value = "YoSQL",
                                    date = "<current_timestamp>",
                                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                        // ... some code
                                    }

                                    // ... rest of generated code

                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationApis.ANNOTATION_API.name())
                        .setDescription("Changing the `annotationApi` configuration option to `ANNOTATION_API` uses the annotation API instead.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.Generated;

                                @Generated(
                                    value = "YoSQL",
                                    date = "<current_timestamp>",
                                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {

                                    @Generated(
                                          value = "YoSQL",
                                          date = "<current_timestamp>",
                                          comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                      // ... some code
                                    }

                                    // ... rest of generated code (same as above)

                                }""")
                        .build())
                .build();
    }

    private static ConfigurationSetting annotateClasses() {
        final var name = "annotateClasses";
        final var description = "Controls whether Generated annotations should be added to the generated classes.";
        final var value = false;
        return setting(GROUP_NAME, name, description, value)
                .addTags(Tags.CLASSES)
                .addExamples(ConfigurationExample.builder()
                        .setValue(String.valueOf(value))
                        .setDescription("The default value of the `annotateClasses` configuration option is `false`. Setting the option to `false` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;

                                public class SomeRepository {

                                    // ... rest of generated code

                                }
                                """)
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(String.valueOf(!value))
                        .setDescription("Changing the `annotateClasses` configuration option to `true` adds the `@Generated` annotation to every generated classes. Its is possible to configure each value individually using other config options.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.processing.Generated;

                                @Generated(
                                    value = "YoSQL",
                                    date = "<current_timestamp>",
                                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {

                                    // ... rest of generated code (same as above)

                                }
                                """)
                        .build())
                .build();
    }

    private static ConfigurationSetting annotateFields() {
        final var name = "annotateFields";
        final var description = "Controls whether Generated annotations should be added to the generated fields.";
        final var value = false;
        return setting(GROUP_NAME, name, description, value)
                .addTags(Tags.FIELDS)
                .addExamples(ConfigurationExample.builder()
                        .setValue(String.valueOf(value))
                        .setDescription("The default value of the `annotateFields` configuration option is `false`. Setting the option to `false` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;

                                public class SomeRepository {

                                    private Object someField;

                                    // ... rest of generated code

                                }
                                """)
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(String.valueOf(!value))
                        .setDescription("Changing the `annotateFields` configuration option to `true` adds the `@Generated` annotation to every generated fields. Its is possible to configure each value individually using other config options.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.processing.Generated;

                                public class SomeRepository {

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;

                                    // ... rest of generated code (same as above)

                                }
                                """)
                        .build())
                .build();
    }

    private static ConfigurationSetting annotateMethods() {
        final var name = "annotateMethods";
        final var description = "Controls whether Generated annotations should be added to the generated methods.";
        final var value = false;
        return setting(GROUP_NAME, name, description, value)
                .addTags(Tags.METHODS)
                .addExamples(ConfigurationExample.builder()
                        .setValue(String.valueOf(value))
                        .setDescription("The default value of the `annotateMethods` configuration option is `false`. Setting the option to `false` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;

                                public class SomeRepository {

                                    public void someMethod() {
                                        // ... some code
                                    }

                                    // ... rest of generated code

                                }
                                """)
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(String.valueOf(!value))
                        .setDescription("Changing the `annotateMethods` configuration option to `true` adds the `@Generated` annotation to every generated methods. Its is possible to configure each value individually using other config options.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.processing.Generated;

                                public class SomeRepository {

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                      // ... some code
                                    }

                                    // ... rest of generated code (same as above)

                                }
                                """)
                        .build())
                .build();
    }

    private static ConfigurationSetting classMembers() {
        final var name = "classMembers";
        final var description = "The annotation members to use for classes.";
        final var type = TypeName.get(GeneratedAnnotationMembers.class);
        final var value = DEFAULT_MEMBERS;
        return enumSetting(GROUP_NAME, name, description, value, type)
                .addTags(Tags.CLASSES)
                .addExamples(ConfigurationExample.builder()
                        .setValue(value.name())
                        .setDescription("The default value of the `classMembers` configuration option is `WITHOUT_DATE`. Setting the option to `WITHOUT_DATE` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                @Generated(
                                    value = "YoSQL",
                                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.ALL.name())
                        .setDescription("Changing the `classMembers` configuration option to `ALL` outputs all annotation members.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                @Generated(
                                    value = "YoSQL",
                                    date = "<current_timestamp>",
                                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {
                                                                
                                  // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.NONE.name())
                        .setDescription("Changing the `classMembers` configuration option to `NONE` outputs no annotation members.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                @Generated
                                public class SomeRepository {
                                                                
                                    // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.VALUE.name())
                        .setDescription("Changing the `classMembers` configuration option to `VALUE` outputs only the `value` member.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                @Generated(
                                    value = "YoSQL"
                                )
                                public class SomeRepository {
                                                                
                                  // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.DATE.name())
                        .setDescription("Changing the `classMembers` configuration option to `DATE` outputs only the `date` member.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                @Generated(
                                    date = "<current_timestamp>"
                                )
                                public class SomeRepository {
                                                                
                                  // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.COMMENT.name())
                        .setDescription("Changing the `classMembers` configuration option to `COMMENT` outputs only the `comment` member.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                @Generated(
                                    comment = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {
                                                                
                                  // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .build();
    }

    private static ConfigurationSetting fieldMembers() {
        final var name = "fieldMembers";
        final var description = "The annotation members to use for fields.";
        final var type = TypeName.get(GeneratedAnnotationMembers.class);
        final var value = DEFAULT_MEMBERS;
        return enumSetting(GROUP_NAME, name, description, value, type)
                .addExamples(ConfigurationExample.builder()
                        .setValue(value.name())
                        .setDescription("The default value of the `fieldMembers` configuration option is `WITHOUT_DATE`. Setting the option to `WITHOUT_DATE` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;
                                   
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.ALL.name())
                        .setDescription("Changing the `fieldMembers` configuration option to `ALL` outputs all annotation members.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.NONE.name())
                        .setDescription("Changing the `fieldMembers` configuration option to `NONE` outputs no annotation members.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                  @Generated
                                  private Object someField;
                                                                
                                  // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.VALUE.name())
                        .setDescription("Changing the `fieldMembers` configuration option to `VALUE` outputs only the `value` member.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                  @Generated(
                                      value = "YoSQL"
                                  )
                                  private Object someField;
                                                                
                                  // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.DATE.name())
                        .setDescription("Changing the `fieldMembers` configuration option to `DATE` outputs only the `date` member.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                  @Generated(
                                      date = "<current_timestamp>"
                                  )
                                  private Object someField;
                                                                
                                  // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.COMMENT.name())
                        .setDescription("Changing the `fieldMembers` configuration option to `COMMENT` outputs only the `comment` member.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                  @Generated(
                                      comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                  )
                                  private Object someField;
                                                                
                                  // ... rest of generated code
                                                                
                                }""")
                        .build())
                .build();
    }

    private static ConfigurationSetting methodMembers() {
        final var name = "methodMembers";
        final var description = "The annotation members to use for methods.";
        final var type = TypeName.get(GeneratedAnnotationMembers.class);
        final var value = DEFAULT_MEMBERS;
        return enumSetting(GROUP_NAME, name, description, value, type)
                .addExamples(ConfigurationExample.builder()
                        .setValue(value.name())
                        .setDescription("The default value of the `methodMembers` configuration option is `WITHOUT_DATE`. Setting the option to `WITHOUT_DATE` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                      // ... some code
                                    }
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.ALL.name())
                        .setDescription("Changing the `methodMembers` configuration option to `ALL` outputs all annotation members.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                        // ... some code
                                    }
                                                                
                                     // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.NONE.name())
                        .setDescription("Changing the `methodMembers` configuration option to `NONE` outputs no annotation members.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated
                                    public void someMethod() {
                                        // ... some code
                                    }
                                                                
                                    // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.VALUE.name())
                        .setDescription("Changing the `methodMembers` configuration option to `VALUE` outputs only the `value` member.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL"
                                    )
                                    public void someMethod() {
                                      // ... some code
                                    }
                                                                
                                    // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.DATE.name())
                        .setDescription("Changing the `methodMembers` configuration option to `DATE` outputs only the `date` member.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        date = "<current_timestamp>"
                                    )
                                    public void someMethod() {
                                        // ... some code
                                    }
                                                                
                                    // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue(GeneratedAnnotationMembers.COMMENT.name())
                        .setDescription("Changing the `methodMembers` configuration option to `COMMENT` outputs only the `comment` member.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                        // ... some code
                                    }
                                                                
                                    // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .build();
    }

    private static ConfigurationSetting classComment() {
        final var name = "classComment";
        final var description = "Sets the comment used for annotated classes.";
        final var value = DEFAULT_COMMENT;
        return setting(GROUP_NAME, name, description, value)
                .addExamples(ConfigurationExample.builder()
                        .setValue(value)
                        .setDescription("The default value of the `classComment` configuration option is `DO NOT MODIFY - automatically generated by YoSQL`. Setting the option to `PROCESSING_API` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                @Generated(
                                    value = "YoSQL",
                                    date = "<current_timestamp>",
                                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue("Hello World!")
                        .setDescription("Changing the `classComment` configuration option to `Hello World!` produces the following code:")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.Generated;
                                                                
                                @Generated(
                                    value = "YoSQL",
                                    date = "<current_timestamp>",
                                    comments = "Hello World!"
                                )
                                public class SomeRepository {
                                                                
                                    // ... rest of generated code (same as above)
                                                                
                                }""")
                        .build())
                .build();
    }

    private static ConfigurationSetting fieldComment() {
        final var name = "fieldComment";
        final var description = "Sets the comment used for annotated fields.";
        final var value = DEFAULT_COMMENT;
        return setting(GROUP_NAME, name, description, value)
                .addExamples(ConfigurationExample.builder()
                        .setValue(value)
                        .setDescription("The default value of the `fieldComment` configuration option is `DO NOT MODIFY - automatically generated by YoSQL`. Setting the option to `DO NOT MODIFY - automatically generated by YoSQL` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue("Hello World!")
                        .setDescription("Changing the `fieldComment` configuration option to `Hello World!` produces the following code:")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "Hello World!"
                                    )
                                    private Object someField;
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .build();
    }

    private static ConfigurationSetting methodComment() {
        final var name = "methodComment";
        final var description = "Sets the comment used for annotated methods.";
        final var value = DEFAULT_COMMENT;
        return setting(GROUP_NAME, name, description, value)
                .addExamples(ConfigurationExample.builder()
                        .setValue(value)
                        .setDescription("The default value of the `methodComment` configuration option is `DO NOT MODIFY - automatically generated by YoSQL`. Setting the option to `DO NOT MODIFY - automatically generated by YoSQL` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                        // ... some code
                                    }
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue("Hello World!")
                        .setDescription("Changing the `methodComment` configuration option to `Hello World!` produces the following code:")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "Hello World!"
                                    )
                                    public void someMethod() {
                                      // ... some code
                                    }
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .build();
    }

    private static ConfigurationSetting generatorName() {
        final var name = "generatorName";
        final var description = "The name of the code generator";
        final var value = "YoSQL";
        return setting(GROUP_NAME, name, description, value)
                .addExamples(ConfigurationExample.builder()
                        .setValue(value)
                        .setDescription("The default value of the `generatorName` configuration option is `YoSQL`. Setting the option to `YoSQL` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue("Hello World!")
                        .setDescription("Changing the `generatorName` configuration option to `Hello World!` produces the following code:")
                        .setResult("""
                                package com.example.persistence;
                                                                
                                import javax.annotation.processing.Generated;
                                                                
                                public class SomeRepository {
                                                                
                                    @Generated(
                                        value = "Hello World!",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;
                                                                
                                    // ... rest of generated code
                                                                
                                }""")
                        .build())
                .build();
    }

    private static ConfigurationSetting repositoryAnnotations() {
        final var name = "repositoryAnnotations";
        final var description = "The additional annotations to be placed on generated repository classes.";
        return listOfAnnotations(name, description);
    }

    private static ConfigurationSetting constructorAnnotations() {
        final var name = "constructorAnnotations";
        final var description = "The additional annotations to be placed on generated constructors.";
        return listOfAnnotations(name, description);
    }

    private static ConfigurationSetting methodAnnotations() {
        final var name = "methodAnnotations";
        final var description = "The additional annotations to be placed on generated methods.";
        return listOfAnnotations(name, description);
    }

    private static ConfigurationSetting listOfAnnotations(final String name, final String description) {
        return ConfigurationSetting.builder()
                .setName(name)
                .setDescription(description)
                .setAntInitializer(CodeBlock.of(".addAll$L($L($L))\n", upperCase(name), CREATE_ANNOTATIONS, name))
                .setCliInitializer(CodeBlock.of(".addAll$L($L($L))\n", upperCase(name), CREATE_ANNOTATIONS, name))
                .setGradleInitializer(CodeBlock.of(".addAll$L($L().stream().map($T::$L).toList())\n", upperCase(name), gradlePropertyName(name), GRADLE_ANNOTATION_TYPE, AS_ANNOTATION))
                .setMavenInitializer(CodeBlock.of(".addAll$L($L($L))\n", upperCase(name), CREATE_ANNOTATIONS, name))
                .addAntFields(antField(TypicalTypes.listOf(ANT_ANNOTATION_TYPE), name, description, CodeBlock.of("new $T<>()", ArrayList.class)))
                .addAntMethods(antAdder(ANT_ANNOTATION_TYPE, name, description))
                .addCliFields(picocliOption(TypicalTypes.listOf(String.class), GROUP_NAME, name, description))
                .addGradleMethods(gradleProperty(gradleContainerOf(GRADLE_ANNOTATION_TYPE), name, description))
                .addImmutableMethods(immutableMethod(TypicalTypes.listOf(Annotation.class), name, description))
                .addMavenFields(mavenParameter(TypicalTypes.listOf(MAVEN_ANNOTATION_TYPE), name, description, "", CodeBlock.of("new $T<>()", ArrayList.class)))
                .build();
    }

    private static TypeSpec antAnnotationSpecType() {
        return TypeSpec.classBuilder(ANNOTATION_SPEC)
                .addModifiers(Modifier.PUBLIC)
                .addField(FieldSpec.builder(ClassName.get(String.class), TYPE).build())
                .addField(FieldSpec.builder(TypicalTypes.listOf(ANT_MEMBER_TYPE), MEMBERS).build())
                .addMethod(MethodSpec.methodBuilder(AS_ANNOTATION)
                        .addModifiers(Modifier.FINAL)
                        .returns(Annotation.class)
                        .addStatement(CodeBlock.builder()
                                .add("return $T.builder()", Annotation.class)
                                .add("$>\n.set$L($L)", upperCase(TYPE), TYPE)
                                .add("\n.addAll$L($T.ofNullable($L).flatMap($T::stream).map($T::$L).toList())",
                                        upperCase(MEMBERS), Stream.class, MEMBERS, Collection.class, ANT_MEMBER_TYPE, AS_ANNOTATION_MEMBER)
                                .add("\n.build()$<")
                                .build())
                        .build())
                .build();
    }

    private static TypeSpec antAnnotationMemberSpecType() {
        return TypeSpec.classBuilder(ANNOTATION_MEMBER_SPEC)
                .addModifiers(Modifier.PUBLIC)
                .addField(FieldSpec.builder(ClassName.get(String.class), TYPE).initializer("$S", "java.lang.String").build())
                .addField(FieldSpec.builder(ClassName.get(String.class), KEY).build())
                .addField(FieldSpec.builder(ClassName.get(String.class), VALUE).build())
                .addMethod(MethodSpec.methodBuilder(AS_ANNOTATION_MEMBER)
                        .addModifiers(Modifier.FINAL)
                        .returns(AnnotationMember.class)
                        .addStatement(CodeBlock.builder()
                                .add("return $T.builder()", AnnotationMember.class)
                                .add("$>\n.set$L($L)", upperCase(KEY), KEY)
                                .add("\n.set$L($L)", upperCase(VALUE), VALUE)
                                .add("\n.set$L($L)", upperCase(TYPE), TYPE)
                                .add("\n.build()$<")
                                .build())
                        .build())
                .build();
    }

    private static TypeSpec mavenAnnotationSpecType() {
        return TypeSpec.classBuilder(ANNOTATION_SPEC)
                .addModifiers(Modifier.PUBLIC)
                .addField(mavenStringParameter(TYPE))
                .addField(mavenParameter(TypicalTypes.listOf(MAVEN_MEMBER_TYPE), MEMBERS))
                .addMethod(MethodSpec.methodBuilder(AS_ANNOTATION)
                        .addModifiers(Modifier.FINAL)
                        .returns(Annotation.class)
                        .addStatement(CodeBlock.builder()
                                .add("return $T.builder()", Annotation.class)
                                .add("$>\n.set$L($L)", upperCase(TYPE), TYPE)
                                .add("\n.addAll$L($T.ofNullable($L).flatMap($T::stream).map($T::$L).toList())",
                                        upperCase(MEMBERS), Stream.class, MEMBERS, Collection.class, MAVEN_MEMBER_TYPE, AS_ANNOTATION_MEMBER)
                                .add("\n.build()$<")
                                .build())
                        .build())
                .build();
    }

    private static TypeSpec mavenAnnotationMemberSpecType() {
        return TypeSpec.classBuilder(ANNOTATION_MEMBER_SPEC)
                .addModifiers(Modifier.PUBLIC)
                .addField(mavenStringParameter(TYPE, "java.lang.String"))
                .addField(mavenStringParameter(KEY))
                .addField(mavenStringParameter(VALUE))
                .addMethod(MethodSpec.methodBuilder(AS_ANNOTATION_MEMBER)
                        .addModifiers(Modifier.FINAL)
                        .returns(AnnotationMember.class)
                        .addStatement(CodeBlock.builder()
                                .add("return $T.builder()", AnnotationMember.class)
                                .add("$>\n.set$L($L)", upperCase(KEY), KEY)
                                .add("\n.set$L($L)", upperCase(VALUE), VALUE)
                                .add("\n.set$L($L)", upperCase(TYPE), TYPE)
                                .add("\n.build()$<")
                                .build())
                        .build())
                .build();
    }

    private static MethodSpec createAntAnnotations() {
        return MethodSpec.methodBuilder(CREATE_ANNOTATIONS)
                .addModifiers(Modifier.FINAL)
                .returns(TypicalTypes.listOf(Annotation.class))
                .addParameter(ParameterSpec.builder(TypicalTypes.listOf(ANT_ANNOTATION_TYPE), "specs", Modifier.FINAL).build())
                .addStatement("return $T.ofNullable($L).flatMap($T::stream).map($T::$L).toList()",
                        Stream.class, "specs", Collection.class, ANT_ANNOTATION_TYPE, AS_ANNOTATION)
                .build();
    }

    private static MethodSpec createCliAnnotations() {
        return MethodSpec.methodBuilder(CREATE_ANNOTATIONS)
                .addModifiers(Modifier.FINAL)
                .returns(TypicalTypes.listOf(Annotation.class))
                .addParameter(ParameterSpec.builder(TypicalTypes.listOf(String.class), "specs", Modifier.FINAL).build())
                .addStatement("return $T.ofNullable($L).flatMap($T::stream).map($T::fromString).toList()",
                        Stream.class, "specs", Collection.class, Annotation.class)
                .build();
    }

    private static MethodSpec createMavenAnnotations() {
        return MethodSpec.methodBuilder(CREATE_ANNOTATIONS)
                .addModifiers(Modifier.FINAL)
                .returns(TypicalTypes.listOf(Annotation.class))
                .addParameter(ParameterSpec.builder(TypicalTypes.listOf(MAVEN_ANNOTATION_TYPE), "specs", Modifier.FINAL).build())
                .addStatement("return $T.ofNullable($L).flatMap($T::stream).map($T::$L).toList()",
                        Stream.class, "specs", Collection.class, MAVEN_ANNOTATION_TYPE, AS_ANNOTATION)
                .build();
    }

    private static TypeSpec gradleAnnotationSpecType() {
        return TypeSpec.classBuilder(ANNOTATION_SPEC)
                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                .addJavadoc("Configures a single Annotation.")
                .addSuperinterface(TypicalTypes.GRADLE_NAMED)
                .addMethod(gradleConstructor())
                .addMethod(gradleNamedProperty(GRADLE_MEMBER_TYPE, MEMBERS, "The annotation members"))
                .addMethod(MethodSpec.methodBuilder(AS_ANNOTATION)
                        .addModifiers(Modifier.FINAL)
                        .returns(Annotation.class)
                        .addStatement(CodeBlock.builder()
                                .add("return $T.builder()", Annotation.class)
                                .add("$>\n.set$L(getName())", upperCase(TYPE))
                                .add("\n.addAll$L(get$L().stream().map($T::$L).toList())",
                                        upperCase(MEMBERS), upperCase(MEMBERS), GRADLE_MEMBER_TYPE, AS_ANNOTATION_MEMBER)
                                .add("\n.build()$<")
                                .build())
                        .build())
                .build();
    }

    private static TypeSpec gradleAnnotationMemberSpecType() {
        return TypeSpec.classBuilder(ANNOTATION_MEMBER_SPEC)
                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                .addJavadoc("Configures a single AnnotationMember.")
                .addSuperinterface(TypicalTypes.GRADLE_NAMED)
                .addMethod(gradleConstructor())
                .addMethod(gradleStringProperty(VALUE, "The value of the annotation member"))
                .addMethod(gradleStringProperty(TYPE, "The fully-qualified type of the annotation member"))
                .addMethod(MethodSpec.methodBuilder(AS_ANNOTATION_MEMBER)
                        .addModifiers(Modifier.FINAL)
                        .returns(AnnotationMember.class)
                        .addStatement(CodeBlock.builder()
                                .add("return $T.builder()", AnnotationMember.class)
                                .add("$>\n.set$L(getName())", upperCase(KEY))
                                .add("\n.set$L(get$L().get())", upperCase(VALUE), upperCase(VALUE))
                                .add("\n.set$L(get$L().getOrElse($S))", upperCase(TYPE), upperCase(TYPE), "java.lang.String")
                                .add("\n.build()$<")
                                .build())
                        .build())
                .build();
    }

    private Annotations() {
        // data class
    }

}
