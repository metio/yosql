/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at http://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.models.meta.data;

import com.squareup.javapoet.TypeName;
import wtf.metio.yosql.internals.javapoet.TypicalTypes;
import wtf.metio.yosql.models.constants.configuration.AnnotationMembers;
import wtf.metio.yosql.models.meta.ConfigurationExample;
import wtf.metio.yosql.models.meta.ConfigurationGroup;
import wtf.metio.yosql.models.meta.ConfigurationSetting;

public final class Annotations {

    public static final String DEFAULT_COMMENT = "DO NOT MODIFY - automatically generated by YoSQL";
    public static final AnnotationMembers DEFAULT_MEMBERS = AnnotationMembers.WITHOUT_DATE;

    public static ConfigurationGroup configurationGroup() {
        return ConfigurationGroup.builder()
                .setName(Annotations.class.getSimpleName())
                .setDescription("Configures how annotations are applied to the generated code.")
                .addSettings(annotateClasses())
                .addSettings(annotateFields())
                .addSettings(annotateMethods())
                .addSettings(classMembers())
                .addSettings(fieldMembers())
                .addSettings(methodMembers())
                .addSettings(classComment())
                .addSettings(fieldComment())
                .addSettings(methodComment())
                .addSettings(generatorName())
                .build();
    }

    private static ConfigurationSetting annotateClasses() {
        return ConfigurationSetting.builder()
                .setName("annotateClasses")
                .setDescription("Controls whether Generated annotations should be added to the generated classes.")
                .setType(TypeName.get(boolean.class))
                .setValue(false)
                .addTags(Tags.CLASSES)
                .addExamples(ConfigurationExample.builder()
                        .setValue("false")
                        .setDescription("The default value of the `annotateClasses` configuration option is `false`. Setting the option to `false` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;

                                public class SomeRepository {

                                    // ... rest of generated code

                                }
                                """)
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue("true")
                        .setDescription("Changing the `annotateClasses` configuration option to `true` adds the `@Generated` annotation to every generated classes. Its is possible to configure each value individually using other config options.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.processing.Generated;

                                @Generated(
                                    value = "YoSQL",
                                    date = "<current_timestamp>",
                                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                )
                                public class SomeRepository {

                                    // ... rest of generated code (same as above)

                                }
                                """)
                        .build())
                .build();
    }

    private static ConfigurationSetting annotateFields() {
        return ConfigurationSetting.builder()
                .setName("annotateFields")
                .setDescription("Controls whether Generated annotations should be added to the generated fields.")
                .setType(TypeName.get(boolean.class))
                .setValue(false)
                .addTags(Tags.FIELDS)
                .addExamples(ConfigurationExample.builder()
                        .setValue("false")
                        .setDescription("The default value of the `annotateFields` configuration option is `false`. Setting the option to `false` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;

                                public class SomeRepository {

                                    private Object someField;

                                    // ... rest of generated code

                                }
                                """)
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue("true")
                        .setDescription("Changing the `annotateFields` configuration option to `true` adds the `@Generated` annotation to every generated fields. Its is possible to configure each value individually using other config options.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.processing.Generated;

                                public class SomeRepository {

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    private Object someField;

                                    // ... rest of generated code (same as above)

                                }
                                """)
                        .build())
                .build();
    }

    private static ConfigurationSetting annotateMethods() {
        return ConfigurationSetting.builder()
                .setName("annotateMethods")
                .setDescription("Controls whether Generated annotations should be added to the generated methods.")
                .setType(TypeName.get(boolean.class))
                .setValue(false)
                .addTags(Tags.METHODS)
                .addExamples(ConfigurationExample.builder()
                        .setValue("false")
                        .setDescription("The default value of the `annotateMethods` configuration option is `false`. Setting the option to `false` therefore produces the same code generated as the default configuration.")
                        .setResult("""
                                package com.example.persistence;

                                public class SomeRepository {

                                    public void someMethod() {
                                        // ... some code
                                    }

                                    // ... rest of generated code

                                }
                                """)
                        .build())
                .addExamples(ConfigurationExample.builder()
                        .setValue("true")
                        .setDescription("Changing the `annotateMethods` configuration option to `true` adds the `@Generated` annotation to every generated methods. Its is possible to configure each value individually using other config options.")
                        .setResult("""
                                package com.example.persistence;

                                import javax.annotation.processing.Generated;

                                public class SomeRepository {

                                    @Generated(
                                        value = "YoSQL",
                                        date = "<current_timestamp>",
                                        comments = "DO NOT MODIFY - automatically generated by YoSQL"
                                    )
                                    public void someMethod() {
                                      // ... some code
                                    }

                                    // ... rest of generated code (same as above)

                                }
                                """)
                        .build())
                .build();
    }

    private static ConfigurationSetting classMembers() {
        return ConfigurationSetting.builder()
                .setName("classMembers")
                .setDescription("The annotation members to use for classes.")
                .setType(TypeName.get(AnnotationMembers.class))
                .setValue(DEFAULT_MEMBERS)
                .build();
    }

    private static ConfigurationSetting fieldMembers() {
        return ConfigurationSetting.builder()
                .setName("fieldMembers")
                .setDescription("The annotation members to use for fields.")
                .setType(TypeName.get(AnnotationMembers.class))
                .setValue(DEFAULT_MEMBERS)
                .build();
    }

    private static ConfigurationSetting methodMembers() {
        return ConfigurationSetting.builder()
                .setName("methodMembers")
                .setDescription("The annotation members to use for methods.")
                .setType(TypeName.get(AnnotationMembers.class))
                .setValue(DEFAULT_MEMBERS)
                .build();
    }

    private static ConfigurationSetting classComment() {
        return ConfigurationSetting.builder()
                .setName("classComment")
                .setDescription("Sets the comment used for annotated classes.")
                .setType(TypicalTypes.STRING)
                .setValue(DEFAULT_COMMENT)
                .build();
    }

    private static ConfigurationSetting fieldComment() {
        return ConfigurationSetting.builder()
                .setName("fieldComment")
                .setDescription("Sets the comment used for annotated fields.")
                .setType(TypicalTypes.STRING)
                .setValue(DEFAULT_COMMENT)
                .build();
    }

    private static ConfigurationSetting methodComment() {
        return ConfigurationSetting.builder()
                .setName("methodComment")
                .setDescription("Sets the comment used for annotated methods.")
                .setType(TypicalTypes.STRING)
                .setValue(DEFAULT_COMMENT)
                .build();
    }

    private static ConfigurationSetting generatorName() {
        return ConfigurationSetting.builder()
                .setName("generatorName")
                .setDescription("The name of the code generator")
                .setType(TypicalTypes.STRING)
                .setValue("YoSQL")
                .build();
    }

    private Annotations() {
        // data class
    }

}
