/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at https://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.codegen.blocks;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import wtf.metio.yosql.testing.configs.AnnotationsConfigurations;

@DisplayName("DefaultAnnotations")
class DefaultAnnotationsTest {

    @Nested
    @DisplayName("Default Configuration")
    class DefaultConfig {

        @Test
        @DisplayName("can annotate classes")
        void shouldAnnotateClasses() {
            // given
            final var generator = new DefaultAnnotations(AnnotationsConfigurations.defaults());

            // when
            final var annotations = generator.generatedClass();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.processing.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

        @Test
        @DisplayName("can annotate fields")
        void shouldAnnotateFields() {
            // given
            final var generator = new DefaultAnnotations(AnnotationsConfigurations.defaults());

            // when
            final var annotations = generator.generatedField();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.processing.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

        @Test
        @DisplayName("can annotate methods")
        void shouldAnnotateMethods() {
            // given
            final var generator = new DefaultAnnotations(AnnotationsConfigurations.defaults());

            // when
            final var annotations = generator.generatedMethod();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.processing.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

    }

    @Nested
    @DisplayName("Custom Configuration")
    class CustomConfig {

        @Test
        @DisplayName("can use javax.annotation.processing.Generated")
        void shouldUseProcessingApi() {
            // given
            final var generator = new DefaultAnnotations(AnnotationsConfigurations.defaults());

            // when
            final var annotations = generator.generatedClass();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.processing.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

        @Test
        @DisplayName("can use javax.annotation.Generated")
        void shouldUseAnnotationApi() {
            // given
            final var generator = new DefaultAnnotations(AnnotationsConfigurations.generated());

            // when
            final var annotations = generator.generatedClass();

            // then
            Assertions.assertEquals("""
                            @javax.annotation.Generated(value = "YoSQL", comments = "DO NOT MODIFY - automatically generated by YoSQL")""",
                    annotations.iterator().next().toString());
        }

    }

}
