/*
 * This file is part of yosql. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at https://creativecommons.org/publicdomain/zero/1.0/. No part of yosql,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms contained
 * in the LICENSE file.
 */

package wtf.metio.yosql.codegen.dao;

import org.junit.jupiter.api.*;
import wtf.metio.yosql.codegen.blocks.BlocksObjectMother;
import wtf.metio.yosql.codegen.logging.LoggingObjectMother;
import wtf.metio.yosql.internals.testing.configs.JavaConfigurations;
import wtf.metio.yosql.internals.testing.configs.RuntimeConfigurations;
import wtf.metio.yosql.models.immutables.JavaConfiguration;

@DisplayName("ToMapConverterGenerator")
final class ToMapConverterGeneratorTest {

    @Nested
    @DisplayName("Using Java default configuration")
    class Defaults {

        private ToMapConverterGenerator generator;

        @BeforeEach
        void setUp() {
            generator = generator(JavaConfigurations.defaults());
        }

        @Test
        void generateToMapConverterClass() {
            Assertions.assertEquals("""
                /**
                 * Disable generating this class by setting 'generateMapConverter' to 'false'.
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final class ToMapConverter {
                  @javax.annotation.processing.Generated(
                      value = "YoSQL",
                      comments = "DO NOT MODIFY - automatically generated by YoSQL"
                  )
                  public final java.util.Map<java.lang.String, java.lang.Object> apply(
                      final java.sql.ResultSet resultSet) throws java.sql.SQLException {
                    final var resultSetMetaData = resultSet.getMetaData();
                    final var row = new java.util.LinkedHashMap<java.lang.String, java.lang.Object>(resultSetMetaData.getColumnCount());
                    for (int index = 1; index <= resultSetMetaData.getColumnCount(); index++) {
                      row.put(resultSetMetaData.getColumnName(index), resultSet.getObject(index));
                    }
                    return row;
                  }
                }
                """, generator.generateToMapConverterClass().getType().toString());
        }

    }

    @Nested
    @DisplayName("Using Java 11 configuration")
    class Java11 {

        private ToMapConverterGenerator generator;

        @BeforeEach
        void setUp() {
            generator = generator(JavaConfigurations.java11());
        }

        @Test
        void generateToMapConverterClass() {
            Assertions.assertEquals("""
                /**
                 * Disable generating this class by setting 'generateMapConverter' to 'false'.
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final class ToMapConverter {
                  @javax.annotation.processing.Generated(
                      value = "YoSQL",
                      comments = "DO NOT MODIFY - automatically generated by YoSQL"
                  )
                  public final java.util.Map<java.lang.String, java.lang.Object> apply(
                      final java.sql.ResultSet resultSet) throws java.sql.SQLException {
                    final var resultSetMetaData = resultSet.getMetaData();
                    final var row = new java.util.LinkedHashMap<java.lang.String, java.lang.Object>(resultSetMetaData.getColumnCount());
                    for (int index = 1; index <= resultSetMetaData.getColumnCount(); index++) {
                      row.put(resultSetMetaData.getColumnName(index), resultSet.getObject(index));
                    }
                    return row;
                  }
                }
                """, generator.generateToMapConverterClass().getType().toString());
        }

    }

    @Nested
    @DisplayName("Using Java 16 configuration")
    class Java16 {

        private ToMapConverterGenerator generator;

        @BeforeEach
        void setUp() {
            generator = generator(JavaConfigurations.java16());
        }

        @Test
        void generateToMapConverterClass() {
            Assertions.assertEquals("""
                /**
                 * Disable generating this class by setting 'generateMapConverter' to 'false'.
                 */
                @javax.annotation.processing.Generated(
                    value = "YoSQL",
                    comments = "DO NOT MODIFY - automatically generated by YoSQL"
                )
                public final class ToMapConverter {
                  @javax.annotation.processing.Generated(
                      value = "YoSQL",
                      comments = "DO NOT MODIFY - automatically generated by YoSQL"
                  )
                  public final java.util.Map<java.lang.String, java.lang.Object> apply(
                      final java.sql.ResultSet resultSet) throws java.sql.SQLException {
                    final var resultSetMetaData = resultSet.getMetaData();
                    final var row = new java.util.LinkedHashMap<java.lang.String, java.lang.Object>(resultSetMetaData.getColumnCount());
                    for (int index = 1; index <= resultSetMetaData.getColumnCount(); index++) {
                      row.put(resultSetMetaData.getColumnName(index), resultSet.getObject(index));
                    }
                    return row;
                  }
                }
                """, generator.generateToMapConverterClass().getType().toString());
        }

    }

    static ToMapConverterGenerator generator(final JavaConfiguration java) {
        return new ToMapConverterGenerator(
                LoggingObjectMother.logger(),
                RuntimeConfigurations.defaults(),
                BlocksObjectMother.annotationGenerator(),
                BlocksObjectMother.classes(java),
                BlocksObjectMother.methods(java),
                BlocksObjectMother.variables(java),
                BlocksObjectMother.controlFlows(java),
                DaoObjectMother.jdbcParameter(java),
                DaoObjectMother.jdbcBlocks(java),
                DaoObjectMother.jdbcMethodExceptionHandler());
    }

}
