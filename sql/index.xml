<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQL on YoSQL</title><link>https://yosql.projects.metio.wtf/sql/</link><description>Recent content in SQL on YoSQL</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 13 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://yosql.projects.metio.wtf/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>Converters</title><link>https://yosql.projects.metio.wtf/sql/converters/</link><pubDate>Sun, 07 Jul 2019 14:27:54 +0200</pubDate><guid>https://yosql.projects.metio.wtf/sql/converters/</guid><description>The JDBC API offers no built-in object mapping mechanism. In order to use high level types of your domain, use a converter to map results to your types. Converters are just plain Java classes that have at least one method that converts a java.sql.ResultSet into some other type. Each converter has an alias to make it easier to reference different converters without specifying their fully qualified name.
Map Converter In case you do not want to use custom domain types, YoSQL provides a built-in default converter that returns a Map&amp;lt;String, Object&amp;gt;.</description></item><item><title>SQL Files</title><link>https://yosql.projects.metio.wtf/sql/sql-files/</link><pubDate>Sun, 07 Jul 2019 14:27:54 +0200</pubDate><guid>https://yosql.projects.metio.wtf/sql/sql-files/</guid><description>Writing .sql files is the essential work that needs to be done in order to use YoSQL. Each file can contain multiple SQL statements. Each statement has its own configuration and metadata attached to it.
Statement Type YoSQL supports the tree types of SQL statements and is able to generate code for them: READING for SQL statements that read data, WRITING for SQL statements that write data, and CALLING for SQL statements that call stored procedures.</description></item><item><title>Structure</title><link>https://yosql.projects.metio.wtf/sql/structure/</link><pubDate>Sun, 16 Jun 2019 18:33:06 +0200</pubDate><guid>https://yosql.projects.metio.wtf/sql/structure/</guid><description>In order to call your SQL statement, a Java class must be created that contains methods for each of your statements. YoSQL will try to detect which repository your SQL statements will end up in. Based on the inputBaseDirectory configuration option, your project structure could look like this:
&amp;lt;inputBaseDirectory&amp;gt;/ └── user/ └── getAllUsers.sql Based on the above example, YoSQL will determine that you want a method called getAllUsers in a repository called UserRepository.</description></item></channel></rss>